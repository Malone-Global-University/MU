Step 14: Component-Based Grid Layout
1. Define Grid Container and Template Classes
/* Grid container for multiple cards/components */
.grid-container {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 2rem;
  margin-top: 2rem;
}

/* Reusable card component */
.card {
  background: var(--section-bg);
  padding: 1rem;
  border-radius: 0.5rem;
  box-shadow: 0 2px 5px rgba(0,0,0,0.05);
  transition: transform 0.3s ease, box-shadow 0.3s ease, background 0.3s ease, color 0.3s ease;
}

.card:hover {
  transform: translateY(-5px);
  box-shadow: 0 5px 15px rgba(0,0,0,0.1);
}

2. Apply Grid Container in HTML
<main id="main-content" role="main" class="p-1">
  <!-- Grid container wraps multiple reusable cards -->
  <div class="grid-container">
    <section id="welcome" class="card">
      <h2>Welcome</h2>
      <p>This is a step-by-step, best-practice webpage built from scratch.</p>
    </section>

    <section id="about" class="card">
      <h2>About</h2>
      <p>The CSS Grid ensures these sections align cleanly on large screens and stack on small screens.</p>
    </section>

    <section id="contact" class="card">
      <h2>Contact</h2>
      <p>Use the navigation links to jump to different sections smoothly.</p>
    </section>

    <section id="extra" class="card">
      <h2>Extra</h2>
      <p>New components can be added here with minimal effort using the same grid layout.</p>
    </section>
  </div>
</main>

3. Advantages of Component-Based Grid

Reusable Layout

Any new content section can be added with just a <section class="card"> inside .grid-container.

Responsive by Design

auto-fit + minmax(250px, 1fr) automatically adjusts columns based on screen width.

Consistent Styling

Cards inherit the same padding, shadow, and hover behavior.

Future-Proof

Supports dashboards, product grids, blog sections, or feature highlights with the same structure.