Step 15: Collapsible Card Component
1. Update HTML with Collapsible Sections
<main id="main-content" role="main" class="p-1">
  <div class="grid-container">
    <section class="card">
      <h2>
        <button class="collapse-toggle" aria-expanded="false" aria-controls="welcome-content">
          Welcome
        </button>
      </h2>
      <div id="welcome-content" class="collapse-content" hidden>
        <p>This is a step-by-step, best-practice webpage built from scratch.</p>
      </div>
    </section>

    <section class="card">
      <h2>
        <button class="collapse-toggle" aria-expanded="false" aria-controls="about-content">
          About
        </button>
      </h2>
      <div id="about-content" class="collapse-content" hidden>
        <p>The CSS Grid ensures these sections align cleanly on large screens and stack on small screens.</p>
      </div>
    </section>

    <section class="card">
      <h2>
        <button class="collapse-toggle" aria-expanded="false" aria-controls="contact-content">
          Contact
        </button>
      </h2>
      <div id="contact-content" class="collapse-content" hidden>
        <p>Use the navigation links to jump to different sections smoothly.</p>
      </div>
    </section>
  </div>
</main>

2. CSS for Collapsible Cards
.collapse-toggle {
  background: none;
  border: none;
  color: var(--accent);
  font-size: 1.2rem;
  cursor: pointer;
  text-align: left;
  width: 100%;
}

.collapse-toggle:focus {
  outline: 2px dashed var(--accent);
}

.collapse-content {
  margin-top: 0.5rem;
  padding-left: 0.5rem;
  transition: max-height 0.3s ease;
}

3. JavaScript for Collapse Behavior
document.addEventListener("DOMContentLoaded", () => {
  const toggles = document.querySelectorAll(".collapse-toggle");

  toggles.forEach(btn => {
    const targetId = btn.getAttribute("aria-controls");
    const target = document.getElementById(targetId);

    btn.addEventListener("click", () => {
      const expanded = btn.getAttribute("aria-expanded") === "true";
      btn.setAttribute("aria-expanded", String(!expanded));
      target.hidden = expanded;
    });
  });
});

4. Advantages

Interactive & Accessible

aria-expanded and aria-controls inform assistive tech about collapsible state.

Keyboard navigable via <button> elements.

Modular

Each card is independent; new collapsible cards can be added by copying structure.

Enhanced UX

Reduces visual clutter while keeping content accessible.

Works with existing CSS Grid layout.

At this point, your webpage has modular components, accessibility, dark mode, responsive grid, and interactive collapsible cards.

The next step (Step 16) could be performance enhancements for dynamic content â€” lazy-loading sections, optimizing JS for minimal blocking, and prefetching resources.