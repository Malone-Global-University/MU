ready-to-use sw.js service worker file for caching your webpage assets and enabling offline support. It’s simple, production-ready, and works with the template we just created.

// sw.js — Service Worker for Offline Support
const CACHE_NAME = 'my-webpage-cache-v1';
const urlsToCache = [
  '/',                // Main HTML
  '/styles.css',      // External CSS if any
  '/scripts.js',      // External JS if any
  '/favicon.ico',     // Favicon
  '/manifest.json',   // PWA manifest
  '/og-image.png'     // Example OG image
];

// Install event — cache essential files
self.addEventListener('install', event => {
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then(cache => cache.addAll(urlsToCache))
      .then(() => self.skipWaiting())
  );
});

// Activate event — cleanup old caches
self.addEventListener('activate', event => {
  event.waitUntil(
    caches.keys().then(keys => 
      Promise.all(
        keys.filter(key => key !== CACHE_NAME)
            .map(key => caches.delete(key))
      )
    )
  );
  self.clients.claim();
});

// Fetch event — respond with cached assets if available
self.addEventListener('fetch', event => {
  event.respondWith(
    caches.match(event.request)
      .then(response => response || fetch(event.request))
  );
});

✅ Features of This Service Worker

Caching Core Assets

Ensures your main HTML, CSS, JS, manifest, favicon, and social images are available offline.

Offline Support

Users can access the page even without a network connection.

Cache Versioning

CACHE_NAME allows for easy version upgrades; old caches are deleted during activate.

Simple Fetch Handling

Attempts to serve cached content first, then falls back to network.

With this, your webpage is now fully offline-capable, production-ready, modular, interactive, accessible, SEO-optimized, and performance-tuned.