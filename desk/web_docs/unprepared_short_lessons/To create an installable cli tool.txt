To create an installable Command Line Interface (CLI) tool using setuptools in Python, the console_scripts entry point in setup.py (or pyproject.toml) is utilized.
Steps:
Project Structure: Organize your project with a setup.py (or pyproject.toml) file at the root and your CLI application code within a package.
Code

    mycli_tool/
    ├── mycli_tool/
    │   └── __init__.py
    │   └── command_line.py
    └── setup.py
command_line.py: Define the entry point function for your CLI. This function will be executed when the CLI command is run.
Python

    # mycli_tool/command_line.py
    def main():
        print("Hello from my CLI tool!")
setup.py: Configure setuptools to create the executable script using console_scripts.
Python

    # setup.py
    from setuptools import setup, find_packages

    setup(
        name='mycli-tool',
        version='0.1.0',
        packages=find_packages(),
        entry_points={
            'console_scripts': [
                'mycommand=mycli_tool.command_line:main',
            ],
        },
    )
name: The name of your package.
version: The package version.
packages=find_packages(): Automatically finds all Python packages in your project.
entry_points: This crucial section defines the console script.
'console_scripts': Specifies that this is for CLI executables.
'mycommand=mycli_tool.command_line:main': Maps the command mycommand to the main function within the command_line module of the mycli_tool package.
Installation: Install your CLI tool locally in editable mode for development or as a regular package.
Editable mode (for development):
Code

        pip install --editable .
Regular installation.
Code

        pip install .
Execution: After installation, you can run your CLI tool from the command line.
Code

    mycommand
