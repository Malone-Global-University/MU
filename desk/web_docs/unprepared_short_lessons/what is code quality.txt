What is code quality?
Code quality is a way to talk about how efficient, readable, and usable code is. Coding is inherently open-ended, and you can solve the same problem in the same programming language in multiple ways. Code quality measures the accuracy and reliability of code—but being bug-free and portable is not the only measure of code quality. It also includes how developer-friendly the code is. Code quality also describes how easy it is to understand, modify, and reuse the code if necessary.

Why is code quality important?
You can write a software function using several hundred lines of code or just a few dozen lines. Your approach could depend on a number of things. For example, you'd consider your programming paradigm. You can also factor in your design patterns, your problem-solving approach, capabilities of your programming language, and your use of external libraries.

Code quality represents the efficiency of the code, not just in its functionality but also in its readability and long-term management.

Quality code makes everyone’s job easier by saving time and resources. Here's a brief rundown of who and how it helps:

Quality code helps a developer reread, build on, and refactor their own code
It helps other developers understand and collaborate on someone else’s code
It helps the system architect or project lead check for adherence to structure and coordinate the team’s work efforts
It helps other stakeholders in software development—such as security or operations teams—test, deploy, and secure the code
Experience over time helps developers refine their coding techniques and approaches to produce high-quality code. 

How do you measure code quality?
Quantitative code quality metrics are discrete and measurable. One example could be the number of errors caught in the code of a software application that has been running for 1,000 hours.

Qualitative code quality metrics are subjective and descriptive. For example, an expert developer can check over a junior developer’s work and make comments.

By combining quantitative and qualitative assessments, it’s possible to attain the best measure of software quality. Other factors that make up code quality include documentation, efficiency, end-user usability, timeliness, and security.

Next, we explain the six key code quality areas of measurement.

Reliable
Reliable code runs as documented each and every time you run it. Reliable code is also robust; it handles unexpected inputs and interruptions without crashing or other rogue behaviors.

To measure reliability, include tracking metrics like the number of system failures over a given time period, mean-time-to-failure, and number of known bugs.

Extendible
A piece of software may run perfectly every time, but what if the code needs to be changed a bit?  Or what if it needs to be used in building out new functionality? What if the developer who originally wrote the code is no longer available?

If code is extendible, it's easy the code to update or modify after it's complete and correct in the initial specifications. Here are factors relevant to extendible code:

Overall software architecture
Modularity
Compliance with coding standards
Length, size, and complexity of the code base
There are various tools, such as static analysis and dependency mapping, that can score these metrics after they read the code base.

Testable
A piece of code should be easy to develop tests for and run tests on.

For instance, it is challenging to write tests that cover every scenario if a single function contains multiple logic steps or references other parts of the software. In contrast, breaking down software into logically separate units, or modules, makes it easier to test.

To measure testability, you can use these techniques:

Map tests to written requirements
Use tools that examine test-to-code coverage
Implement cyclomatic complexity tools like Halstead complexity measures to assess code complexity
Developers may also follow test-driven development paradigms and perform regular manual code reviews to improve testability.

Portable
You might want it to be easy to take the code from one environment the make it work again in another environment. If so, you can measure portability.

For example, if you wanted to take an Android app and port it to iOS, how much work would be involved? If you produce code with cross-platform use cases in mind, porting to a new target system becomes relatively easy.

Portability is dependent on how tightly coupled the code is to its underlying software and hardware target system. Tightly coupled code requires highly specific virtual machines to run.

In contrast, code deployed in containers can run in any environment. In some cases, complete code refactoring may be necessary to uncouple the functionality from the target system. 

Reusable
High-quality code is modular and designed for reuse. For instance, a function designed to add tasks to a task-tracking database could be reused in different parts of a software project, or in a different software project altogether.

Software components designed for reuse are often attached to APIs. APIs provide a standard way to interface with the functionality of the reusable code, rather than simply copying and pasting a function.

What are some tips to improve code quality?
There are many different types of tools that help check and improve code quality. For example, you can use testing frameworks and tools for many purposes:

Static code analysis
Software versioning
Coding style checks
Code complexity and cyclomatic complexity checks
Comprehensive test coverage
Performance testing
Security verification
By incorporating one or more tools into the software development lifecycle, it becomes easier to build high-quality code with every project. Make sure to integrate tools into the integrated development environment (IDE) so developers can build high-quality software projects from the start.

You can also build in automated code quality checks and code review tools trigged during continuous integration and development (CI/CD) events, like pushing code to a Git repository.

Next are some more strategies to improve code quality.

Read about IDEs »

Reviews
Automation and specialty software tooling help to review code quality, but there are benefits in manual code reviews as well.

Pair programming activities involve getting developers to check each other’s code to catch quality issues missed in solo programming. You can review based on guidance from programming paradigms and design patterns like object-oriented programming, functional programming, and model-view-controller pattern.

Refactoring
After code quality testing and code review have identified lower-quality code in a codebase, you may flag the code for refactoring.

Refactoring rebuilds the same code to be of higher quality or more performant. The code must be tested thoroughly before and after refactoring to ensure that no bugs are introduced in the development process.

Documentation
To build high-quality code, you need high-quality requirements documentation. This documentation should consistently and thoroughly outline the functional, nonfunctional, and performance requirements of the system. These documents guide effective, thorough architecture design and testing. 

Style guides
Style guides cover a set of conventions for developing code. These conventions cover style-based aspects like formatting, naming, and indentation. While code may still run when it isn’t built to these conventions, it decreases the quality in terms of maintainability.

When they follow style guides, such as Python’s PEP 8, developers can build code that can be read and maintained by other developers.

Coding standards
Coding standards go beyond the basic stylistic conventions of style guides. They become more like standard operating procedures (SOPs) in how to develop code. They include guidelines on design patterns to use, architectural rules, and how to do error handling.

Coding standards may be community-based, such as the SEI CERT C Coding Standard for secure coding. You can also develop them in-house for guidance specific to your organization or projects.

Both style guides and coding standards help define code quality long before a project ever starts.