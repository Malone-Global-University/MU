Perfect! Let’s make the generator fully flexible so you can:

Specify custom section names.

Choose which sections to include (e.g., skip diagrams or exercises).

Automatically generate the lesson folder and skeleton HTML page.

1. Flexible Lesson Generator (generate-lesson-flex.js)
const fs = require('fs');
const path = require('path');

// Get lesson name and optional sections from command line
const lessonName = process.argv[2];
let sectionsInput = process.argv[3]; // comma-separated list of section keys

if (!lessonName) {
  console.error("Usage: node generate-lesson-flex.js <lesson-name> [sections]");
  console.error("Example: node generate-lesson-flex.js lesson3 intro,key-concepts,summary");
  process.exit(1);
}

// Default sections if none specified
const defaultSections = ['intro', 'key-concepts', 'diagrams', 'exercises', 'summary'];
const sections = sectionsInput ? sectionsInput.split(',') : defaultSections;

// Paths
const lessonDir = path.join(__dirname, 'components', lessonName);
const lessonHtmlPath = path.join(__dirname, `${lessonName}.html`);

// --- Create lesson components folder ---
if (!fs.existsSync(lessonDir)) fs.mkdirSync(lessonDir, { recursive: true });

// --- Template content for sections ---
const templates = {
  'intro': `<section id="introduction">
  <h2>Introduction</h2>
  <p>Introduction content for ${lessonName} goes here.</p>
</section>`,

  'key-concepts': `<section id="key-concepts">
  <h2>Key Concepts</h2>
  <article>
    <h3>Concept 1</h3>
    <p>Description of concept 1.</p>
  </article>
</section>`,

  'diagrams': `<section id="diagrams">
  <h2>Visual Diagrams</h2>
  <p>Placeholder for diagrams.</p>
</section>`,

  'exercises': `<section id="exercises">
  <h2>Exercises</h2>
  <article>
    <h3>Exercise 1</h3>
    <p>Exercise description here.</p>
  </article>
</section>`,

  'summary': `<section id="summary">
  <h2>Summary</h2>
  <p>Summary points for ${lessonName}.</p>
</section>`
};

// --- Create section files ---
sections.forEach(section => {
  if (templates[section]) {
    const filePath = path.join(lessonDir, `${section}.html`);
    if (!fs.existsSync(filePath)) {
      fs.writeFileSync(filePath, templates[section], 'utf8');
      console.log(`Created: ${filePath}`);
    }
  }
});

// --- Create lesson HTML skeleton ---
if (!fs.existsSync(lessonHtmlPath)) {
  const sectionDivs = sections.map(s => `<div id="lesson-${s}"></div>`).join('\n    ');

  const lessonHtmlContent = `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>${lessonName.replace(/-/g,' ')} | Malone University</title>
  <link rel="stylesheet" href="components/css/theme.css">
</head>
<body>

  <!-- Navbar / Hero -->
  <div id="navbar-placeholder"></div>
  <div id="hero-placeholder"></div>

  <main>
    ${sectionDivs}
  </main>

  <!-- Footer -->
  <div id="footer-placeholder"></div>

  <!-- Theme toggle -->
  <script src="components/js/theme-toggle.js"></script>

  <!-- Load components -->
  <script>
    async function loadComponent(id, path) {
      const res = await fetch(path);
      const html = await res.text();
      document.getElementById(id).innerHTML = html;
    }

    // Core components
    loadComponent('navbar-placeholder', 'components/navbar.html');
    loadComponent('hero-placeholder', 'components/hero.html');
    loadComponent('footer-placeholder', 'components/footer.html');

    // Lesson components
    ${sections.map(s => `loadComponent('lesson-${s}', 'components/${lessonName}/${s}.html');`).join('\n    ')}
  </script>

</body>
</html>`;

  fs.writeFileSync(lessonHtmlPath, lessonHtmlContent, 'utf8');
  console.log(`Created lesson page: ${lessonHtmlPath}`);
} else {
  console.log(`Lesson page already exists: ${lessonHtmlPath}`);
}

console.log(`Lesson scaffolding for '${lessonName}' complete with sections: ${sections.join(', ')}`);

2. How to Use
Default (all sections)
node generate-lesson-flex.js lesson4


Generates: intro, key-concepts, diagrams, exercises, summary.

Custom Sections
node generate-lesson-flex.js lesson5 intro,key-concepts,summary


Generates only intro, key-concepts, and summary.

✅ Benefits:

Fully flexible: choose sections per lesson.

Automatically scaffolds both components and HTML page.

Works with your component-based theme system.

Keeps everything modular and maintainable.

If you want, I can also enhance it to automatically insert new lessons into a lessons/index.html page for navigation across all lessons, so students can access lessons dynamically.

Do you want me to do that?
