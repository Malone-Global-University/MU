Perfect ‚Äî we can refactor your workflow into a modular, component-based structure. I‚Äôll create:

A skeleton HTML page that references components.

Separate component files that you can save in a components folder.

This keeps your current inline theme system intact while separating reusable parts.

1. Skeleton Page (library.html)
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Malone University | Library</title>
  <link rel="icon" href="images/favicon.ico" type="image/x-icon" />
  <link rel="stylesheet" href="components/css/theme.css">
</head>
<body>

  <!-- ===== NAVBAR ===== -->
  <div id="navbar-placeholder"></div>

  <!-- ===== HERO ===== -->
  <div id="hero-placeholder"></div>

  <main>
    <section>
      <h2>Sample Section</h2>
      <p>This is a placeholder paragraph. <a href="#">Sample Link</a></p>
    </section>
  </main>

  <!-- ===== FOOTER ===== -->
  <div id="footer-placeholder"></div>

  <!-- ===== THEME TOGGLE SCRIPT ===== -->
  <script src="components/js/theme-toggle.js"></script>
  <script>
    // Simple component loader
    async function loadComponent(id, path) {
      const res = await fetch(path);
      const html = await res.text();
      document.getElementById(id).innerHTML = html;
    }

    loadComponent('navbar-placeholder', 'components/navbar.html');
    loadComponent('hero-placeholder', 'components/hero.html');
    loadComponent('footer-placeholder', 'components/footer.html');
  </script>
</body>
</html>


This page is a barebones skeleton. All reusable content is in components files.

2. Component Files
components/navbar.html
<nav class="navbar">
  <div class="logo-container">
    <img src="logo.png" alt="Malone University Logo" class="logo-img">
    <span class="school-name">Malone University</span>
  </div>
  <ul class="nav-links">
    <li><a href="/">Home</a></li>
    <li><a href="/contact">Contact</a></li>
    <li><a href="/jm">Founder</a></li>
    <li><a href="/mission">Mission</a></li>
    <li><a href="/hardened">FINAL OFFER</a></li>
    <li><a href="/departments">Departments</a></li>
    <li><a href="/departments/library">Library</a></li>
  </ul>
  <button id="theme-toggle" class="hamburger" title="Toggle theme">üíª</button>
</nav>

components/hero.html
<div class="hero">
  <h1>Welcome to Malone University</h1>
  <p>Explore knowledge, courses, and community resources.</p>
</div>

components/footer.html
<footer>
  <p>¬© 2025 Malone University. Building the future, on our own terms.</p>
  <p>
    <a href="https://twitter.com/MaloneGlobal" target="_blank" rel="noopener noreferrer">Twitter</a> |
    <a href="https://facebook.com/YOUR_HANDLE" target="_blank" rel="noopener noreferrer">Facebook</a> |
    <a href="https://instagram.com/maloneglobaluniversity" target="_blank" rel="noopener noreferrer">Instagram</a> |
    <a href="/static/terms.html">Terms</a> |
    <a href="/static/contact.html">Contact</a>
  </p>
  Updated 08/14/2025.
</footer>

components/css/theme.css

Move your CSS variables and base styles here (theme, navbar, hero, sections, footer, responsiveness).

:root {
  --bg: #121212;
  --card: #1e1e1e;
  --text: #f0f0f0;
  --accent: #58a6ff;
  --accent-hover: #377bb5;
}

@media (prefers-color-scheme: light) {
  :root {
    --bg: #f9f9f9;
    --card: #ffffff;
    --text: #121212;
    --accent: #0055cc;
    --accent-hover: #003f99;
  }
}

:root.light { ... }
:root.dark { ... }

/* Base */
* { box-sizing: border-box; margin:0; padding:0; }
body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background: var(--bg); color: var(--text); line-height:1.6; padding-top:120px; }
a { color: var(--accent); text-decoration:none; }
a:hover { color: var(--accent-hover); text-decoration:underline; }

/* Navbar, Hero, Sections, Footer, Responsive rules */
/* (Copy your existing styles here) */

components/js/theme-toggle.js
(function() {
  const root = document.documentElement;
  const toggleBtn = document.getElementById("theme-toggle");

  const saved = localStorage.getItem("theme-preference");
  if (saved) setTheme(saved);
  else setTheme("system");

  toggleBtn?.addEventListener("click", () => {
    const current = localStorage.getItem("theme-preference") || "system";
    const next = current === "system" ? "dark" :
                 current === "dark" ? "light" : "system";
    setTheme(next);
  });

  function setTheme(mode) {
    root.classList.remove("light","dark");
    if (mode==="light") root.classList.add("light");
    else if(mode==="dark") root.classList.add("dark");
    localStorage.setItem("theme-preference",mode);
    updateIcon(mode);
  }

  function updateIcon(mode){
    if(!toggleBtn) return;
    toggleBtn.textContent = mode==="light" ? "‚òÄÔ∏è" : mode==="dark" ? "üåô" : "üíª";
  }
})();


‚úÖ Result:

Your HTML pages remain lightweight and skeleton-like.

Navbar, hero, footer, and theme system are now separate, reusable components.

Any updates to these components automatically propagate to all pages.

I can also make your sections and articles modular so lessons like your IA page can be loaded as separate components too, keeping a fully componentized course structure.

Do you want me to do that next?