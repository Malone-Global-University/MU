Perfect! Let’s enhance each lesson page to include automatic “Previous” and “Next” lesson navigation links at the bottom of the page. We’ll generate these links based on the alphabetical order in the lessons/index.html.

1. Updated Lesson Generator with Prev/Next Links
const fs = require('fs');
const path = require('path');

const lessonName = process.argv[2];
let sectionsInput = process.argv[3];

if (!lessonName) {
  console.error("Usage: node generate-lesson-flex.js <lesson-name> [sections]");
  process.exit(1);
}

const defaultSections = ['intro', 'key-concepts', 'diagrams', 'exercises', 'summary'];
const sections = sectionsInput ? sectionsInput.split(',') : defaultSections;

// Paths
const lessonDir = path.join(__dirname, 'components', lessonName);
const lessonHtmlPath = path.join(__dirname, `${lessonName}.html`);
const lessonsIndexPath = path.join(__dirname, 'lessons', 'index.html');

// --- Step 1: Create lesson components folder ---
if (!fs.existsSync(lessonDir)) fs.mkdirSync(lessonDir, { recursive: true });

// --- Step 2: Create section files ---
const templates = {
  'intro': `<section id="introduction">
  <h2>Introduction</h2>
  <p>Introduction content for ${lessonName} goes here.</p>
</section>`,
  'key-concepts': `<section id="key-concepts">
  <h2>Key Concepts</h2>
  <article>
    <h3>Concept 1</h3>
    <p>Description of concept 1.</p>
  </article>
</section>`,
  'diagrams': `<section id="diagrams">
  <h2>Visual Diagrams</h2>
  <p>Placeholder for diagrams.</p>
</section>`,
  'exercises': `<section id="exercises">
  <h2>Exercises</h2>
  <article>
    <h3>Exercise 1</h3>
    <p>Exercise description here.</p>
  </article>
</section>`,
  'summary': `<section id="summary">
  <h2>Summary</h2>
  <p>Summary points for ${lessonName}.</p>
</section>`
};

sections.forEach(section => {
  if (templates[section]) {
    const filePath = path.join(lessonDir, `${section}.html`);
    if (!fs.existsSync(filePath)) {
      fs.writeFileSync(filePath, templates[section], 'utf8');
      console.log(`Created: ${filePath}`);
    }
  }
});

// --- Step 3: Update lessons index ---
const lessonsDir = path.join(__dirname, 'lessons');
if (!fs.existsSync(lessonsDir)) fs.mkdirSync(lessonsDir, { recursive: true });

let existingLessons = [];
if (fs.existsSync(lessonsIndexPath)) {
  const indexContent = fs.readFileSync(lessonsIndexPath, 'utf8');
  const linkRegex = /<li><a href=".*?">(.*?)<\/a><\/li>/g;
  let match;
  while ((match = linkRegex.exec(indexContent)) !== null) {
    existingLessons.push({ name: match[1], file: match[1].toLowerCase().replace(/\s+/g, '-') + '.html' });
  }
}

// Add current lesson if not already included
if (!existingLessons.find(l => l.name === lessonName.replace(/-/g, ' '))) {
  existingLessons.push({ name: lessonName.replace(/-/g, ' '), file: `${lessonName}.html` });
}

// Sort alphabetically
existingLessons.sort((a, b) => a.name.localeCompare(b.name));

// Build the index HTML
const indexHtmlContent = `<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Lessons | Malone University</title>
<link rel="stylesheet" href="../components/css/theme.css">
</head>
<body>
<h1>All Lessons</h1>
<ul id="lessons-list">
  ${existingLessons.map(l => `<li><a href="../${l.file}">${l.name}</a></li>`).join('\n  ')}
</ul>
</body>
</html>`;

fs.writeFileSync(lessonsIndexPath, indexHtmlContent, 'utf8');
console.log(`Updated lessons index at: ${lessonsIndexPath} (sorted alphabetically)`);

// --- Step 4: Determine prev/next lessons ---
const lessonNames = existingLessons.map(l => l.file);
const currentIndex = lessonNames.indexOf(`${lessonName}.html`);
const prevLesson = currentIndex > 0 ? lessonNames[currentIndex - 1] : null;
const nextLesson = currentIndex < lessonNames.length - 1 ? lessonNames[currentIndex + 1] : null;

// --- Step 5: Create lesson HTML skeleton ---
const sectionDivs = sections.map(s => `<div id="lesson-${s}"></div>`).join('\n    ');

let navLinksHtml = `<div class="lesson-nav" style="margin-top:2rem;">`;
if (prevLesson) navLinksHtml += `<a href="../${prevLesson}" style="margin-right:1rem;">⬅ Previous</a>`;
if (nextLesson) navLinksHtml += `<a href="../${nextLesson}">Next ➡</a>`;
navLinksHtml += `</div>`;

if (!fs.existsSync(lessonHtmlPath)) {
  const lessonHtmlContent = `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>${lessonName.replace(/-/g,' ')} | Malone University</title>
  <link rel="stylesheet" href="components/css/theme.css">
</head>
<body>

  <div id="navbar-placeholder"></div>
  <div id="hero-placeholder"></div>

  <main>
    ${sectionDivs}
    ${navLinksHtml}
  </main>

  <div id="footer-placeholder"></div>

  <script src="components/js/theme-toggle.js"></script>

  <script>
    async function loadComponent(id, path) {
      const res = await fetch(path);
      const html = await res.text();
      document.getElementById(id).innerHTML = html;
    }

    loadComponent('navbar-placeholder', 'components/navbar.html');
    loadComponent('hero-placeholder', 'components/hero.html');
    loadComponent('footer-placeholder', 'components/footer.html');
    ${sections.map(s => `loadComponent('lesson-${s}', 'components/${lessonName}/${s}.html');`).join('\n    ')}
  </script>
</body>
</html>`;

  fs.writeFileSync(lessonHtmlPath, lessonHtmlContent, 'utf8');
  console.log(`Created lesson page: ${lessonHtmlPath}`);
} else {
  console.log(`Lesson page already exists: ${lessonHtmlPath}`);
}

console.log(`Lesson '${lessonName}' scaffolding, navigation, and index update complete.`);

✅ Features Added

Creates lesson components & HTML skeleton.

Updates lessons/index.html alphabetically.

Automatically calculates Previous / Next lesson links and adds them at the bottom of the lesson page.

Fully compatible with your theme system and modular components.

Do you want me to also style the Previous/Next links nicely so they match your theme with hover effects and spacing?