Perfect! Letâ€™s extend your generator so that each new lesson automatically populates the hero section and navbar from a config file, keeping everything modular.

Weâ€™ll create a site-config.json in your project root to store global site info like the university name, logo, hero text, and navbar links. The generator will read this file and inject the placeholders automatically.

1. Create site-config.json
{
  "universityName": "Malone University",
  "logoPath": "logo.png",
  "hero": {
    "title": "Welcome to Malone University",
    "subtitle": "Explore knowledge, courses, and community resources."
  },
  "navbarLinks": [
    { "label": "Home", "href": "/" },
    { "label": "Contact", "href": "/contact" },
    { "label": "Founder", "href": "/jm" },
    { "label": "Mission", "href": "/mission" },
    { "label": "FINAL OFFER", "href": "/hardened" },
    { "label": "Departments", "href": "/departments" },
    { "label": "Library", "href": "/departments/library" }
  ]
}


hero contains default title and subtitle.

navbarLinks is an array of all navbar items.

2. Update Generator Script

Add these steps:

// -------------------------
// Step 0: Load site config
// -------------------------
const configPath = path.join(__dirname, 'site-config.json');
let siteConfig = {
  universityName: "Malone University",
  logoPath: "logo.png",
  hero: { title: "", subtitle: "" },
  navbarLinks: []
};

if (fs.existsSync(configPath)) {
  siteConfig = JSON.parse(fs.readFileSync(configPath, 'utf8'));
  console.log("Loaded site-config.json");
}

// Generate navbar HTML component
const navbarHtmlPath = path.join(__dirname, 'components', 'navbar.html');
if (!fs.existsSync(navbarHtmlPath)) {
  const navbarLinksHtml = siteConfig.navbarLinks.map(link =>
    `<li><a href="${link.href}">${link.label}</a></li>`
  ).join('\n    ');

  const navbarHtml = `<nav class="navbar">
  <div class="logo-container">
    <img src="${siteConfig.logoPath}" alt="${siteConfig.universityName} Logo" class="logo-img">
    <span class="school-name">${siteConfig.universityName}</span>
  </div>
  <ul class="nav-links">
    ${navbarLinksHtml}
  </ul>
  <button id="theme-toggle" class="hamburger" title="Toggle theme">ðŸ’»</button>
</nav>`;

  fs.mkdirSync(path.dirname(navbarHtmlPath), { recursive: true });
  fs.writeFileSync(navbarHtmlPath, navbarHtml, 'utf8');
  console.log("Created components/navbar.html from config");
}

// Generate hero HTML component
const heroHtmlPath = path.join(__dirname, 'components', 'hero.html');
if (!fs.existsSync(heroHtmlPath)) {
  const heroHtml = `<div class="hero">
  <h1>${siteConfig.hero.title}</h1>
  <p>${siteConfig.hero.subtitle}</p>
</div>`;
  fs.writeFileSync(heroHtmlPath, heroHtml, 'utf8');
  console.log("Created components/hero.html from config");
}

// Generate footer HTML component
const footerHtmlPath = path.join(__dirname, 'components', 'footer.html');
if (!fs.existsSync(footerHtmlPath)) {
  const footerHtml = `<footer>
  <p>Â© 2025 ${siteConfig.universityName}. Building the future, on our own terms.</p>
</footer>`;
  fs.writeFileSync(footerHtmlPath, footerHtml, 'utf8');
  console.log("Created components/footer.html");
}

3. How it Works

Navbar: dynamically generated from site-config.json links.

Hero: uses default title/subtitle from config.

Footer: pulls university name from config.

All new lessons automatically load these placeholders with your existing JS loader.

âœ… Result:

New lessons are fully modular.

Hero, navbar, and footer automatically populate.

Easy to update globallyâ€”just change site-config.json.

Theme, sections, prev/next links, and CSS are already handled.

Next, I can merge this updated config feature directly into the fully optimized lesson generator script so you have one complete generator for all future lessons.

Do you want me to do that?