Skip to content
Chat history

You said:
make a list of static webhosts sorted into free or paid groups.
ChatGPT said:
Here’s a clean breakdown of static site hosting providers, grouped into free and paid tiers.

Free Static Web Hosts
(Most have paid upgrades for custom domains, bandwidth, or features)

Developer-focused / Git-integrated:

GitHub Pages – Free, Git-based, good for open-source and personal projects.

GitLab Pages – Free with GitLab repos.

Bitbucket Cloud + Static hosting – Free for Bitbucket repos.

Netlify – Free tier with continuous deployment, 125 GB bandwidth/month.

Vercel – Free tier, auto-deploy from Git, edge network.

Render – Free tier with 750 build minutes/month.

Drag-and-drop / beginner-friendly:

Neocities – 1 GB free storage, simple file uploads, basic HTML/CSS/JS hosting.

Surge.sh – Free tier for quick CLI-based deployments.

Fleek – Free IPFS-based static hosting.

Specialized or alternative storage-based:

Cloudflare Pages – Free tier, Git-based, built-in CDN.

Firebase Hosting (Google) – Free tier with 1 GB storage / 10 GB bandwidth.

Azure Static Web Apps (Microsoft) – Free tier with GitHub Actions integration.

Amazon S3 + CloudFront – Can be free within AWS Free Tier limits for 12 months.

Paid Static Web Hosts
(Most also have a free tier, but these plans are meant for scaling)

Netlify Pro / Business – Higher bandwidth, team features, analytics.

Vercel Pro / Enterprise – Higher limits, advanced caching, team workflows.

Render Paid Plans – More build minutes, private repos.

GitHub Enterprise Cloud – Private hosting at scale.

Cloudflare Pages Paid Plans – Higher build minutes, analytics, enterprise edge features.

Firebase Hosting Blaze Plan – Pay-as-you-go for bandwidth & storage.

Amazon S3 + CloudFront (Beyond free tier) – Pay per GB stored/transferred.

Azure Static Web Apps Standard/Premium – Better performance, SLA guarantees.

Surge.sh Premium – Private projects, custom SSL, unlimited publishing.

Forge / Envoyer (by Laravel) – Paid deployment services for static or dynamic sites.

If you want, I can also make a “middle ground” list showing providers that have generous free tiers but realistically require payment once you grow—that would be useful for planning your school site’s future hosting strategy.

You said:
yes
ChatGPT said:
Got it — here’s the middle ground list of static web hosts.
These are platforms that start free but often require payment once your site has a custom domain, higher traffic, or team collaboration.

Middle Ground Static Web Hosts
(Free for small/personal projects, realistically paid for production use)

Git-integrated / developer-oriented:

Netlify – Free tier great for hobby sites, but custom analytics, more than 125 GB/month bandwidth, or advanced features push you into paid.

Vercel – Free for personal projects, but team features, analytics, and high-traffic sites cost.

Render – Free for small sites, but bandwidth and build limits can hit quickly.

Cloudflare Pages – Free for most hobby sites, but pro features like enhanced analytics or Workers scaling are paid.

GitLab Pages – Free with GitLab repos, but CI/CD minutes and storage are limited without upgrading.

Beginner-friendly / drag-and-drop:

Surge.sh – Free for public projects, but private deployments and custom SSL require paid.

Neocities – Free 1 GB storage, but larger sites or more bandwidth require a supporter plan.

Cloud-based static hosting:

Firebase Hosting – Free tier (1 GB storage, 10 GB bandwidth), but quickly paid once you exceed it.

Amazon S3 + CloudFront – Can be free for 12 months; then pay per GB stored and transferred.

Azure Static Web Apps – Free for basic needs; paid tiers for SLAs, more regions, and higher usage.

If you want, I can now turn all three lists (free / middle / paid) into a single compact table so you can see the upgrade path at a glance. That would make it easier for you to plan for maloneuniversity.org long-term hosting.

You said:
make a list of free and paid dynamic web hosts
ChatGPT said:
Here’s a breakdown of dynamic web hosting providers, grouped into free and paid tiers.

Free Dynamic Web Hosts
(Most have paid upgrades for more traffic, databases, or team use)

General-purpose dynamic hosts (PHP, Node.js, Python, etc.):

Heroku – Free tier for small apps (Postgres, Node.js, Python, Ruby), but sleeps after inactivity.

Glitch – Free for public apps, Node.js-based, has editing environment.

Railway.app – Free credits each month, supports many languages, databases.

Replit – Free hosting for small web apps, multiple languages.

Cyclic.sh – Free Node.js hosting, GitHub integration.

Koyeb – Free tier for small apps and APIs (supports Docker).

Fly.io – Free allowance for small apps, deploy globally.

Deta Space – Free tier for small cloud apps with data storage.

Specialized dynamic hosting:

Firebase (Google) – Free tier for dynamic features via Firestore, Authentication, Cloud Functions.

Supabase – Free tier for Postgres database + API hosting.

Render – Free tier for web services & databases.

AlwaysData – Free tier includes PHP, Python, Node.js, MySQL.

Paid Dynamic Web Hosts
(Most also offer free tiers, but these plans scale for real-world apps)

Managed hosting & cloud platforms:

Heroku (Hobby/Professional) – Paid plans remove sleep limits, add performance.

Railway Pro – More credits, bigger apps, databases.

Glitch Pro – Always-on apps, more resources.

Koyeb Paid – Higher resources, custom scaling.

Fly.io Paid – More regions, RAM, CPU.

Render Paid – Better performance, private repos, custom scaling.

Replit Hacker/Teams – More compute power, always-on.

Cloud providers (pay-as-you-go):

AWS EC2 / Lightsail – Virtual servers, any dynamic stack.

Google Cloud Compute / App Engine – Dynamic app hosting at scale.

Azure App Service – Dynamic hosting with scaling.

DigitalOcean App Platform – Managed deployment for dynamic apps.

Linode / Vultr – Affordable VPS for any stack.

Traditional managed hosts:

DreamHost – Shared and VPS hosting for PHP/MySQL apps.

HostGator – Shared dynamic hosting.

SiteGround – PHP/MySQL with managed WordPress.

Bluehost – Shared or VPS hosting for dynamic apps.

If you want, I can also make a middle ground list like we did for static hosting — these would be platforms that start free but realistically require payment for production-grade apps. That list is especially important for dynamic hosting since free tiers are often more limited.

You said:
yes please
ChatGPT said:
Here’s your Middle Ground Dynamic Web Hosts list —
platforms that start free but usually require payment once you need always-on performance, more resources, databases, or team features.

Middle Ground Dynamic Web Hosts
(Free for hobby projects, realistically paid for production use)

Developer-focused / flexible stack:

Heroku – Free for prototypes, but production requires paid (keeps apps awake, more RAM).

Railway.app – Free monthly credits; once you exceed them, you pay per GB of RAM-hour and database storage.

Render – Free for tiny services, but paid for higher RAM, better performance, and DB scaling.

Fly.io – Free allowance covers small demo apps; serious usage needs paid.

Koyeb – Free tier with basic instances, but scaling or higher CPU/RAM costs.

AlwaysData – Free tier good for testing; production traffic needs paid plan.

Beginner-friendly / low-code style:

Glitch – Free for public projects; paid for always-on, private repos, more storage.

Replit – Free for basic hosting; paid for always-on, more compute power.

Backend-as-a-Service (BaaS):

Firebase – Free tier for small traffic; paid for high Firestore reads/writes, hosting bandwidth.

Supabase – Free tier covers small Postgres + auth; scaling requires paid plan.

Deta Space – Free for tiny apps; scaling features require special plans.

If you want, I can now merge all four categories (static free, static middle, dynamic free, dynamic middle) into one master table so you can compare hosts and decide where to start maloneuniversity.org and how to scale later. That would make your school hosting strategy very clear.

You said:
This isn't for me. This is for a class teaching website creation.
ChatGPT said:
Got it — so instead of just a planning document for maloneuniversity.org, you need something student-friendly that works as a teaching aid for a “Website Creation” class.

That means:

Clearly split Static vs Dynamic hosts.

Separate Free, Middle Ground, and Paid categories.

Include short descriptions so students understand why they’d choose one.

Keep jargon light but accurate.

Possibly make it copy-and-paste-ready into your course material.

Here’s a classroom-ready hosting list:

1. Static Web Hosts
(For websites with fixed files: HTML, CSS, JS — no server-side code)

Free
GitHub Pages – Free hosting from Git repos, great for learning version control.

Netlify – Free plan with auto-deploy from GitHub, great for beginners.

Vercel – Easy Git deployment, free for personal sites.

Neocities – Old-school style HTML hosting, beginner-friendly.

Cloudflare Pages – Free hosting with CDN for speed.

Middle Ground (start free, but production needs paid)
Netlify – Free to start; pay for more bandwidth, analytics, and pro tools.

Vercel – Free hobby tier; pay for team features or high traffic.

Neocities – Free 1 GB; supporter plan for more space.

Firebase Hosting – Free small tier; pay for more storage/bandwidth.

Paid
Netlify Pro – More resources, analytics.

Vercel Pro – Better caching, performance, and team workflows.

Amazon S3 + CloudFront – Pay-as-you-go hosting with CDN.

2. Dynamic Web Hosts
(For websites that use server-side code, databases, APIs, or user accounts)

Free
Heroku – Free app hosting, multiple languages, sleeps after inactivity.

Glitch – Build and host Node.js apps in browser.

Railway.app – Free monthly credits, supports many languages.

Replit – Code and host in many languages online.

Firebase – Database, auth, hosting, and serverless functions.

Supabase – Free Postgres database + auth API.

Middle Ground (start free, but production needs paid)
Heroku – Free for demos; pay for always-on and more RAM.

Railway.app – Free monthly credits; pay for more usage.

Render – Free small plan; pay for scaling and database upgrades.

Fly.io – Free small tier; pay for more regions and RAM.

Glitch – Free for public apps; pay for always-on and private projects.

Firebase – Free small tier; pay for higher usage.

Supabase – Free small tier; pay for more database space and performance.

Paid
AWS EC2 / Lightsail – Cloud servers for any language.

Google Cloud App Engine – Managed hosting for apps.

Azure App Service – Runs apps in many languages.

DigitalOcean App Platform – Paid hosting for apps and APIs.

HostGator / Bluehost / SiteGround – Traditional web hosts for PHP/MySQL apps.

If you want, I can turn this into a visual chart for your students that shows what type of hosting to choose based on their project — it could have arrows from “Personal Blog” → Static Free, or “Online Store” → Dynamic Paid. That makes it a decision map instead of just a list.

You said:
yes please
ChatGPT said:
Here’s a student-friendly Hosting Decision Map you can drop straight into your lesson materials.
I’ll keep it simple, visual, and easy to follow for beginners.

Website Hosting Decision Map
[ What kind of website are you building? ]
                |
    +-----------+-----------+
    |                       |
[ Static site ]       [ Dynamic site ]
(No server code)     (Needs server, DB, user logins)
    |                       |
    v                       v
[ Small / personal ]   [ Small / learning project ]
    |                       |
    v                       v
[ Static Free Hosts ]   [ Dynamic Free Hosts ]
(GitHub Pages,          (Heroku, Glitch,
 Netlify, Vercel,        Railway, Replit,
 Neocities)              Firebase, Supabase)
    |                       |
    v                       v
[ Growing / high traffic ] [ Growing / high traffic ]
    |                       |
    v                       v
[ Static Middle Ground ]  [ Dynamic Middle Ground ]
(Netlify Pro,             (Heroku Hobby,
 Vercel Pro,               Railway Pro,
 Firebase paid tier)       Render, Fly.io, Firebase/Supabase paid)
    |                       |
    v                       v
[ Business / Enterprise ] [ Business / Enterprise ]
(Cloudflare Pro,          (AWS, Google Cloud,
 Amazon S3,                Azure, DigitalOcean,
 Azure Static Web Apps)    HostGator, SiteGround)
How to Read This
Start at the top — ask “Do I need a server/database?”

Static site → choose from Static Free for small projects, upgrade as needed.

Dynamic site → choose from Dynamic Free for small apps, upgrade as needed.

Middle Ground is for when your project gets traffic or needs more features.

Paid/Enterprise is for large-scale, commercial, or mission-critical websites.

If you want, I can also make this as a colorful infographic (PNG or SVG) so students see it visually instead of in plain text. That way it’s classroom-projector friendly and printable for handouts.

You said:
what classes typically teach teach website hosting? 
ChatGPT said:
Website hosting is usually taught inside web development or IT-related classes, but the name and scope depend on the program level (high school, college, bootcamp).

Here’s how it typically appears:

High School Level
Web Design / Web Development – Covers HTML, CSS, basic hosting, and publishing a site.

Computer Science I/II – May include hosting as part of final projects.

Digital Media / Technology – Sometimes introduces free hosting for portfolios.

CTE (Career & Technical Education) – Information Technology track often includes basic hosting and domain setup.

College / University Level
Intro to Web Development – HTML/CSS/JavaScript with a section on deploying to a server.

Full Stack Web Development – Covers both static and dynamic hosting, cloud platforms.

Internet Technologies – Broader look at hosting, domains, DNS, and server configuration.

E-commerce Development – Hosting requirements for online stores.

Systems Administration – Deeper dive into setting up and maintaining web servers.

Cloud Computing – AWS, Azure, Google Cloud hosting and scaling.

Vocational / Bootcamps
Front-End Web Development Bootcamp – Usually covers GitHub Pages, Netlify, or Vercel.

Full-Stack Bootcamp – Adds Heroku, Render, AWS for dynamic hosting.

IT Support / Systems Admin Courses – Includes hosting as part of server management.

✅ Pattern:
If a course is design-focused, hosting is usually taught at a basic level (how to upload to Netlify).
If it’s development-focused, hosting is taught at an intermediate level (Git workflows, static vs. dynamic).
If it’s IT or cloud-focused, hosting is taught at an advanced level (DNS, VPS, cloud orchestration).

If you’d like, I can make you a curriculum module called “Introduction to Website Hosting” that works as a plug-in lesson for any of these classes — complete with objectives, vocabulary, examples, and a hands-on activity using free hosts. That way it’s classroom-ready.

You said:
yes please
ChatGPT said:
Alright — here’s a classroom-ready module called "Introduction to Website Hosting" that you can drop directly into a web development or IT course.
It’s written so it works for high school, college, or bootcamp settings.

Lesson Plan: Introduction to Website Hosting
Lesson Overview
Students will learn what website hosting is, why it’s necessary, the different types of hosting, and how to publish a website using a free hosting service.

Learning Objectives
By the end of this lesson, students will be able to:

Define website hosting and explain how it works.

Differentiate between static and dynamic hosting.

Identify free, middle ground, and paid hosting options.

Deploy a simple HTML site to a free static web host.

Key Vocabulary
Website Hosting – A service that stores your website’s files and makes them accessible on the internet.

Domain Name – The address users type in to visit your site (e.g., example.com).

Static Site – A site made of fixed files (HTML, CSS, JS) with no server-side processing.

Dynamic Site – A site that uses server-side code (PHP, Python, Node.js) or databases.

CDN (Content Delivery Network) – A system of servers that deliver content faster to users worldwide.

DNS (Domain Name System) – Translates a domain name into an IP address that computers use.

Lesson Outline
1. Introduction (10 min)
Show a simple analogy: Hosting is like renting a “plot of land” on the internet.

Explain that all websites live on a server that is always connected to the internet.

Introduce static vs. dynamic hosting using examples:

Static: Personal portfolio, blog, landing page.

Dynamic: Online store, social media, dashboard.

2. Types of Hosting (15 min)
Static Hosting (e.g., GitHub Pages, Netlify, Vercel)

Dynamic Hosting (e.g., Heroku, Railway, Render)

Free / Middle Ground / Paid tiers — use the Hosting Decision Map.

Briefly mention cloud services (AWS, Azure, Google Cloud).

3. How Hosting Works (10 min)
Hosting = files on a server + domain name + DNS connection.

Explain file transfer: Uploading via Git, drag-and-drop, or FTP.

Describe CDNs for speed.

4. Hands-On Activity: Deploy a Static Site (30 min)
Goal: Publish a simple HTML site to a free hosting platform.

Steps:

Give students a basic HTML/CSS “Hello World” site.

Have them create a GitHub account (or use Netlify drop).

Walk through publishing using GitHub Pages OR Netlify drag-and-drop.

Test the live site in the browser.

5. Wrap-Up & Discussion (10 min)
Ask students: “Which hosting type would you use for…?” (give scenarios).

Recap static vs. dynamic, free vs. paid.

Encourage them to explore other free hosting services.

Assessment
Formative: Observe students during the hands-on activity to ensure they can publish a site.

Summative: Have students submit a link to their live hosted site and a short paragraph explaining which hosting category it belongs to and why.

Materials Needed
Computer with internet access.

Sample HTML/CSS site.

Access to free hosting platforms (GitHub Pages, Netlify, or similar).

Hosting Decision Map (printed or on projector).

Extension Ideas
For advanced students: Deploy a dynamic Node.js app to Heroku.

For design students: Add custom domains and explore DNS settings.

For IT students: Set up a VPS (e.g., on DigitalOcean) and manually host a site.

If you want, I can also bundle this lesson plan with:

The Hosting Decision Map as a printable PDF.

A student handout comparing 10 popular free hosting platforms.

A step-by-step illustrated guide for publishing to GitHub Pages and Netlify.

That would make this a complete “ready to teach” kit.

You said:
It seems I should teach three different courses, design-focused, development focused, and IT/cloud focused.
ChatGPT said:
Exactly — that’s actually how most professional web education is structured.
Trying to teach design, development, and IT/cloud hosting all in one course tends to overwhelm beginners, but separating them gives each student a clear, deep skillset.

Here’s how you could structure your three courses:

1. Design-Focused: Web Design & Publishing
Audience: Students interested in visuals, branding, and usability.

Goal: Teach them how to design and publish visually appealing static websites.

Key Topics:

HTML & CSS basics

Page layout & typography

Color theory & accessibility

Image optimization

Simple animations and effects

Using design tools (Figma, Canva, Photoshop)

Static site hosting (GitHub Pages, Netlify, Vercel, Neocities)

Custom domain setup for portfolios

Final Project:

A personal portfolio site deployed to a free static host.

2. Development-Focused: Full-Stack Web Development
Audience: Students who want to code both front-end and back-end.

Goal: Teach them how to build interactive and data-driven websites.

Key Topics:

HTML, CSS, JavaScript fundamentals

DOM manipulation and frameworks (React, Vue, etc.)

Server-side programming (Node.js, Python, PHP)

APIs and AJAX

Databases (SQL, NoSQL)

Authentication and security basics

Dynamic hosting (Heroku, Render, Railway, Fly.io)

Deployment automation with Git

Final Project:

A functional web app (e.g., to-do list with login) deployed to a dynamic host.

3. IT/Cloud-Focused: Web Infrastructure & Hosting
Audience: Students who want careers in system administration, DevOps, or cloud architecture.

Goal: Teach them how to configure, manage, and scale hosting environments.

Key Topics:

Internet architecture and protocols (HTTP, DNS, TCP/IP)

Server types: shared, VPS, dedicated, cloud

Linux server setup and security

Web servers (Apache, Nginx)

DNS configuration and domain management

CDNs and load balancing

Cloud hosting (AWS, Azure, Google Cloud)

Containerization (Docker) and orchestration (Kubernetes)

Backup, monitoring, and scaling strategies

Final Project:

Launch a VPS or cloud instance, configure a secure web server, and deploy a site.

If you want, I can map these three courses into a year-long program so students can either take just one track or progress from design → development → cloud.
That way you have a layered curriculum where each track builds on the previous one.

You said:
yes please
ChatGPT said:
Alright — here’s a year-long layered program for teaching website creation split into three tracks:

Track 1: Design-Focused (static site creation & publishing)

Track 2: Development-Focused (interactive & database-driven apps)

Track 3: IT/Cloud-Focused (servers, infrastructure, scaling)

Each track can stand alone or be taken in sequence for a complete foundation-to-pro career pathway.

Year-Long Program: Website Creation & Hosting
📅 Semester 1 – Track 1: Web Design & Publishing
Goal: Students design and publish visually appealing static websites.

Weeks 1–2: Introduction to the Web

What the internet is, how websites work

Browsers, servers, domains, hosting basics

Weeks 3–5: HTML & CSS Foundations

HTML structure and tags

CSS styling, layout, and typography

Responsive design basics

Weeks 6–8: Design Principles

Color theory

Accessibility and contrast

Image optimization

UI/UX basics

Weeks 9–10: Publishing a Website

Free static hosts (GitHub Pages, Netlify, Vercel, Neocities)

Custom domain setup

Basic SEO (title tags, descriptions)

Weeks 11–12: Final Project

Personal portfolio site hosted online

Peer review and feedback session

📅 Semester 2 – Track 2: Full-Stack Web Development
Goal: Students build interactive, database-driven web applications.

Weeks 1–2: Front-End JavaScript

Variables, functions, DOM manipulation

Events and form handling

Weeks 3–5: Client-Side Interactivity

Fetch API, AJAX

Single-page applications (intro to React or Vue)

Weeks 6–8: Server-Side Programming

Node.js basics

Routing and templates

Intro to APIs

Weeks 9–10: Databases

SQL (Postgres/MySQL) vs. NoSQL (MongoDB)

CRUD operations

Connecting front-end to back-end

Weeks 11–12: Deployment of Dynamic Sites

Heroku, Render, Railway basics

Environment variables

Final dynamic project with authentication (e.g., to-do app with login)

📅 Semester 3 – Track 3: Web Infrastructure & Cloud Hosting
Goal: Students configure, manage, and scale web servers and cloud environments.

Weeks 1–2: Internet Infrastructure Basics

IP addresses, DNS, HTTP/HTTPS

How domains map to servers

Weeks 3–5: Server Administration

Linux command line basics

Setting up Apache or Nginx

Securing a server (firewalls, SSL certificates)

Weeks 6–8: Cloud & VPS Hosting

AWS EC2, Lightsail basics

Google Cloud, Azure overview

Deploying to VPS and configuring DNS

Weeks 9–10: Scaling & Reliability

CDNs and load balancers

Backup and monitoring tools

Automation with scripts

Weeks 11–12: Capstone Project

Launch and configure a VPS/cloud server

Deploy a secure, live production-ready site

Document setup for handoff to “client”

Program Flow
Students can enter at any track if they have prior skills.

Completing all three creates a design-to-deployment skillset.

Each track ends with a portfolio-ready project that can be showcased online.

If you want, I can now create a visual “roadmap” chart for this, so students see a three-lane learning path with arrows showing progression from beginner → advanced.
That would make it perfect for a course catalog or syllabus handout.

You said:
yes please
ChatGPT said:
Here’s your three-track website creation roadmap in a visual-friendly text layout you can easily turn into a PDF or graphic for students.

Website Creation Roadmap
(3 Learning Tracks – Take Individually or in Sequence)

 ┌─────────────────────────────┐
 │   Track 1: Web Design &     │
 │          Publishing         │
 │  (Static Sites)             │
 ├─────────────────────────────┤
 │ • HTML & CSS basics         │
 │ • Design principles         │
 │ • Accessibility & UX        │
 │ • Free hosting (Netlify,    │
 │   GitHub Pages, Vercel)     │
 │ • Custom domains            │
 │                             │
 │ Final Project: Portfolio    │
 │ website hosted online       │
 └───────────────┬─────────────┘
                 │
                 ▼
 ┌─────────────────────────────┐
 │  Track 2: Full-Stack Web    │
 │       Development           │
 │  (Static + Dynamic Sites)   │
 ├─────────────────────────────┤
 │ • JavaScript fundamentals   │
 │ • APIs & interactivity      │
 │ • Node.js back-end basics   │
 │ • Databases (SQL/NoSQL)     │
 │ • Dynamic hosting (Heroku,  │
 │   Render, Railway)          │
 │                             │
 │ Final Project: Functional   │
 │ web app with login system   │
 └───────────────┬─────────────┘
                 │
                 ▼
 ┌─────────────────────────────┐
 │  Track 3: Web Infrastructure│
 │         & Cloud Hosting     │
 │  (Servers & Scaling)        │
 ├─────────────────────────────┤
 │ • Internet architecture     │
 │ • Linux server setup        │
 │ • Apache/Nginx config       │
 │ • Cloud hosting (AWS, Azure,│
 │   Google Cloud)             │
 │ • Security & SSL            │
 │ • Scaling & automation      │
 │                             │
 │ Final Project: Secure, live │
 │ cloud-hosted website        │
 └─────────────────────────────┘
How to Present This to Students
As a poster or flyer: Use three colored lanes (blue = design, green = dev, orange = IT/cloud).

As a digital chart: Add icons (paintbrush for design, code bracket for dev, server rack for IT).

In the syllabus: Place this in the introduction so students can see possible progression paths.

If you want, I can turn this into a full-color infographic (PNG or SVG) so it’s ready for printing or displaying in a slideshow without you needing to design it yourself. That way it’s visually engaging from day one.