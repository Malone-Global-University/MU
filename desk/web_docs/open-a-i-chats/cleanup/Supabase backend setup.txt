Skip to content
Chat history

You said:
I need to start over. What are the steps to building a supabase backend? I made a github account just for this project. I made a supabase account just for this project. I made a project folder on my local drive for the supabase database. It has a supabase folder and config.toml . I put code into a index.ts in a nested folder. I put keys into and .env. I made a html form with correct code in my websites folder which is separate from this directory. I made secrets in the supabase gui. Please list all the steps from beginning to end that it takes for my form html to be live and intake data and store it. Go slow becausae I have never made a functional backend or database before and am new to all these websites.
ChatGPT said:
Got it — let’s go step by step, from zero to having your HTML form actually send data to your Supabase database.
I’ll walk slowly and clearly so you can follow the process without getting lost.

Step 1 — Understand the Moving Parts
Before we even touch code, here’s what’s happening conceptually:

Your HTML form → collects data from a user.

Frontend JavaScript → takes that form data and sends it to Supabase using its JavaScript client library.

Supabase → receives the request, authenticates it with your project keys, and stores the data in your PostgreSQL database.

You → later retrieve the data from Supabase (either in your site or the Supabase dashboard).

You already have accounts, so now it’s just a matter of connecting them.

Step 2 — Create Your Database Table in Supabase
Your form needs somewhere to send data.

Go to your Supabase dashboard → select your project.

In the Table Editor, click New Table.

Name it something like submissions.

Add the columns that match your form’s fields. For example:

id → type: bigint, default: bigserial, primary key.

name → type: text.

email → type: text.

message → type: text.

Click Save.

Step 3 — Get Your API Keys
You need these for your frontend JavaScript.

In Supabase, go to Project Settings → API.

Copy:

Project URL (looks like https://xxxx.supabase.co)

anon public key (for frontend use)

Never put your service role key in frontend code — it’s only for server-side.

Step 4 — Set Up Your HTML + JavaScript
Your HTML form (in your website folder) should look like:

<form id="myForm">
  <input type="text" name="name" placeholder="Your Name" required />
  <input type="email" name="email" placeholder="Your Email" required />
  <textarea name="message" placeholder="Your Message"></textarea>
  <button type="submit">Send</button>
</form>

<script type="module">
  import { createClient } from "https://esm.sh/@supabase/supabase-js";

  const supabaseUrl = "YOUR_SUPABASE_PROJECT_URL";
  const supabaseKey = "YOUR_ANON_PUBLIC_KEY";
  const supabase = createClient(supabaseUrl, supabaseKey);

  document.getElementById("myForm").addEventListener("submit", async (e) => {
    e.preventDefault();

    const formData = new FormData(e.target);
    const name = formData.get("name");
    const email = formData.get("email");
    const message = formData.get("message");

    const { data, error } = await supabase
      .from("submissions")
      .insert([{ name, email, message }]);

    if (error) {
      console.error(error);
      alert("Error submitting form");
    } else {
      alert("Form submitted!");
      e.target.reset();
    }
  });
</script>
Replace:

YOUR_SUPABASE_PROJECT_URL → your project URL.

YOUR_ANON_PUBLIC_KEY → your anon key.

Step 5 — Configure Row Level Security (RLS)
By default, Supabase blocks inserts unless you set up permissions.

In Supabase dashboard, go to Table Editor → submissions.

Click Auth → Policies.

Turn Row Level Security ON.

Create a new policy:

Name: Allow public insert

Action: INSERT

Expression: true

Save.

Step 6 — Test Locally
Open your HTML file in your browser and try submitting.

Check the Supabase Table Editor → see if the new row appears.

Step 7 — Deploy Your Website
If it works locally:

Upload your HTML and JS files to your hosting (Netlify, GitHub Pages, or wherever your site lives).

Visit the live site and test again.

Step 8 — Secure & Improve
If your form is spam-sensitive, add CAPTCHA or server-side validation.

Never put your service role key in the browser.

You can later make a backend API route for more control.

If you want, I can now write the exact HTML + JS for your current form so you can copy-paste and get it running immediately.

Do you want me to do that next?

You said:
here is my the hmtl that is live now: 
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Skill Registry – Malone University</title>
  <link rel="stylesheet" href="/css/mgu.css"/>
<script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js"></script>
<script>
  const SUPABASE_URL = "https://qjidisadxrndjfuvpakx.supabase.co";
  const SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFqaWRpc2FkeHJuZGpmdXZwYWt4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ1ODY0MDYsImV4cCI6MjA3MDE2MjQwNn0.hvuwqYVBDra25xN8Ls2t5VGNzcMGw99NRO_QXvrXVEY";

  const supabase = supabase.createClient("https://qjidisadxrndjfuvpakx.supabase.co", "");

  document.getElementById('skillForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    const form = e.target;

    const skillsArray = form.skills.value.split(',').map(s => s.trim());

    const { data, error } = await supabase
      .from('skills') // Use your actual table name
      .insert([
        {
          name: form.name.value,
          email: form.email.value,
          bio: form.bio.value,
          location: form.location.value,
          github: form.github.value,
          website: form.website.value,
          skills: skillsArray,
          public_profile: form.public_profile.checked
        }
      ]);

    const status = document.getElementById('formStatus');
    if (error) {
      status.innerText = "Error: " + error.message;
      status.style.color = "red";
    } else {
      status.innerText = "Thanks! Your info was submitted.";
      status.style.color = "green";
      form.reset();
    }
  });
</script>


</head>
<body>
  <main class="catalog-page">
    <h2>Skill Registry</h2>
    <p>Submit your skillset to contribute to liberation projects across the Pan-African world. This is a vetting form, not a resume dump.</p>

    <form id="skillForm">
      <label>Name:<br/><input type="text" name="name" required /></label><br/><br/>
      <label>Email:<br/><input type="text" name="email" required /></label><br/><br/>
      <label>Location (optional):<br/><input type="text" name="location" /></label><br/><br/>
      <label>Skills(comma seperated):<br/><input type="text" name="skills" required /></label><br/><br/>
      <label>Years of Experience:<br/><input type="number" name="experience" min="0" /></label><br/><br/>
      <label>Description / Bio:<br/><textarea name="bio" rows="4"></textarea></label><br/><br/>
      <label>Github:<br/><input type="text" name="github" required /></label><br/><br/>      
      <label>Website:<br/><input type="text" name="website" required /></label><br/><br/>
      <label>Public Profile:<br/><input type="text" name="public_profile" required /></label><br/><br/>
      <button type="submit">Submit</button>
    </form>

    <p id="responseMessage"></p>
  </main>

  <script>
    document.getElementById('skillForm').addEventListener('submit', async function(e) {
      e.preventDefault();

      const data = Object.fromEntries(new FormData(e.target).entries());

      try {
       const res = await fetch("https://xpwresnwouioavxozfal.supabase.co/functions/v1/submit-skill", {
  method: "POST",
  headers: { "Content-Type": "application/json" },
  body: JSON.stringify(data),
});


import { serve } from 'https://deno.land/std/http/server.ts'
import { createClient } from 'https://esm.sh/@supabase/supabase-js'

const supabase = createClient(
  Deno.env.get("https://xpwresnwouioavxozfal.supabase.co"),
  Deno.env.get("process.env.SUPABASE_KEY")
)

serve(async (req) => {
  try {
    const body = await req.json()

    const { data, error } = await supabase
      .from("skills")
      .insert([
        {
          name: body.name,
          contact: body.contact,
          location: body.location,
          skills: body.skills.split(',').map(s => s.trim()),
          experience: parseInt(body.experience),
          bio: body.bio
        }
      ])

    if (error) throw error

    return new Response(JSON.stringify({ success: true }), {
      headers: { "Content-Type": "application/json" },
      status: 200
    })
  } catch (err) {
    return new Response(JSON.stringify({ error: err.message }), {
      headers: { "Content-Type": "application/json" },
      status: 400
    })
  }
})
", {
          method: 'POST',
          headers: {'Content-Type': 'application/json'},
          body: JSON.stringify(data)
        });

        if (res.ok) {
          document.getElementById('responseMessage').innerText = 'Submission successful!';
          e.target.reset();
        } else {
          throw new Error('Submission failed.');
        }
      } catch (err) {
        document.getElementById('responseMessage').innerText = err.message;
      }
    });
  </script>
</body>
</html>
ChatGPT said:
I see exactly what’s going on — you’ve currently got three different approaches tangled together in the same HTML file:

Direct-from-browser Supabase insert (good for quick tests, but needs Row Level Security policy)

Posting to a Supabase Edge Function (submit-skill)

Edge Function server code accidentally pasted inside your HTML script tag (this won’t run in the browser — it’s Deno server code, not client code)

That’s why this isn’t working — the browser is trying to run server-side code it can’t understand.

Let’s Reset to a Clean, Working Flow
Since you said you’re new and want something live fast, I’ll walk you through the simplest working version:

Skip the Edge Function for now.

Insert directly into your Supabase table from the browser.

Secure it with a Row Level Security (RLS) insert policy so the anon key is safe to use.

1 — Make sure your skills table is ready
In the Supabase dashboard:

Table name: skills

Columns:

id (bigint, primary key, auto-increment)

name (text)

email (text)

location (text, nullable)

skills (text[] — array of text values)

experience (integer)

bio (text)

github (text)

website (text)

public_profile (boolean)

2 — Enable Row Level Security & Insert Policy
In Table Editor → skills → RLS → enable Row Level Security.

Add a policy:

Name: Allow public insert

Action: INSERT

Expression: true

3 — Clean HTML + JavaScript
Here’s your working HTML file (no server code mixed in):

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Skill Registry – Malone University</title>
  <link rel="stylesheet" href="/css/mgu.css"/>
  <script type="module">
    import { createClient } from "https://esm.sh/@supabase/supabase-js";

    const SUPABASE_URL = "https://qjidisadxrndjfuvpakx.supabase.co";
    const SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFqaWRpc2FkeHJuZGpmdXZwYWt4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ1ODY0MDYsImV4cCI6MjA3MDE2MjQwNn0.hvuwqYVBDra25xN8Ls2t5VGNzcMGw99NRO_QXvrXVEY";

    const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

    document.addEventListener("DOMContentLoaded", () => {
      const form = document.getElementById("skillForm");
      const status = document.getElementById("responseMessage");

      form.addEventListener("submit", async (e) => {
        e.preventDefault();

        const formData = new FormData(form);
        const skillsArray = formData.get("skills").split(",").map(s => s.trim());

        const { error } = await supabase
          .from("skills")
          .insert([{
            name: formData.get("name"),
            email: formData.get("email"),
            location: formData.get("location"),
            skills: skillsArray,
            experience: parseInt(formData.get("experience") || "0"),
            bio: formData.get("bio"),
            github: formData.get("github"),
            website: formData.get("website"),
            public_profile: formData.get("public_profile").toLowerCase() === "true"
          }]);

        if (error) {
          status.innerText = "Error: " + error.message;
          status.style.color = "red";
        } else {
          status.innerText = "Thanks! Your info was submitted.";
          status.style.color = "green";
          form.reset();
        }
      });
    });
  </script>
</head>
<body>
  <main class="catalog-page">
    <h2>Skill Registry</h2>
    <p>Submit your skillset to contribute to liberation projects across the Pan-African world.</p>

    <form id="skillForm">
      <label>Name:<br/><input type="text" name="name" required /></label><br/><br/>
      <label>Email:<br/><input type="email" name="email" required /></label><br/><br/>
      <label>Location:<br/><input type="text" name="location" /></label><br/><br/>
      <label>Skills (comma separated):<br/><input type="text" name="skills" required /></label><br/><br/>
      <label>Years of Experience:<br/><input type="number" name="experience" min="0" /></label><br/><br/>
      <label>Description / Bio:<br/><textarea name="bio" rows="4"></textarea></label><br/><br/>
      <label>Github:<br/><input type="text" name="github" required /></label><br/><br/>      
      <label>Website:<br/><input type="text" name="website" required /></label><br/><br/>
      <label>Public Profile (true/false):<br/><input type="text" name="public_profile" required /></label><br/><br/>
      <button type="submit">Submit</button>
    </form>

    <p id="responseMessage"></p>
  </main>
</body>
</html>
4 — Why this works
It uses Supabase’s JavaScript client in the browser (module import).

It talks directly to the skills table with your public anon key.

It will work live as soon as your table and RLS policy are set.

If you want, I can also help you move back to the Edge Function approach later — that’s better for security, but harder for a first backend.

Do you want me to rewrite this so it matches exactly your existing skills table schema before you test? That way you don’t get “column does not exist” errors.