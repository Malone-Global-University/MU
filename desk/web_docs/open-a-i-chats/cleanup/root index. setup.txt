Starting mgu over from first principles. Todays task is to build root index page from first principles then layer it. Every change will be methodical and disciplined. I will keep many sources documenting changes. Many tools for site documentation will be 1. Hand typed .odt kept off site; 2. Github commits 3. Netlify deploys.
ChatGPT said:

That’s exactly the right mindset — treating your site like a disciplined project from day one will pay off hugely later. Let’s set this up from first principles so you can layer on complexity methodically.

Here’s a clean approach for today’s task (root index.html setup):

1. Root Project Setup

Create a new folder for the project:

mgu/
  ├── index.html
  ├── css/
  │     └── style.css
  ├── js/
  │     └── main.js
  ├── images/
  └── docs/        (for internal documentation or copies of .odt exports)


This keeps presentation (css), behavior (js), and assets (images) separate. The docs folder is optional and can be .gitignored since you’ll keep your ODT offline.

2. Root index.html (First Principles Baseline)

Here’s the cleanest possible HTML scaffold, valid, minimal, and layered for future expansion:

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Malone Global University</title>
  <link rel="icon" href="images/favicon.ico" type="image/x-icon" />
  <link rel="stylesheet" href="css/style.css" />
</head>
<body>
  <header>
    <h1>Malone Global University</h1>
    <nav>
      <ul>
        <li><a href="#">Home</a></li>
        <li><a href="#">Programs</a></li>
        <li><a href="#">Research</a></li>
        <li><a href="#">Community</a></li>
      </ul>
    </nav>
  </header>

  <main>
    <section>
      <h2>Welcome</h2>
      <p>Building knowledge from first principles, one step at a time.</p>
    </section>
  </main>

  <footer>
    <p>&copy; 2025 Malone Global University</p>
  </footer>

  <script src="js/main.js"></script>
</body>
</html>

3. First CSS Layer (css/style.css)

Keep it basic. Don’t theme yet — just structure:

/* Reset */
* { margin: 0; padding: 0; box-sizing: border-box; }

/* Base */
body {
  font-family: system-ui, sans-serif;
  line-height: 1.6;
  padding: 1rem;
}

/* Header & Nav */
header {
  border-bottom: 1px solid #ccc;
  padding-bottom: 0.5rem;
  margin-bottom: 1rem;
}

nav ul {
  display: flex;
  list-style: none;
  gap: 1rem;
}

/* Footer */
footer {
  margin-top: 2rem;
  border-top: 1px solid #ccc;
  padding-top: 0.5rem;
  text-align: center;
}

4. Documentation Discipline

.odt journal (kept offline) → daily log of decisions & rationale.

Git commits → atomic, with meaningful messages like “Add root index.html scaffold”.

Netlify deploys → act as live checkpoints you can roll back to.

Would you like me to also draft the first Git commit plan (step-by-step with exact commands) so your repo history starts as clean as your root page?

You said:
I built a text hournal. I have this for first entry: 7:45pm 8/15/2025


## Deleted github repo.
## Old site saved to usb. 
## "MGU" folder created at C://MGU. 
## Created 5 sub folders: "components", "images", "data", "departments", "MGU-DOCS"
## Inside MGU-DOCS created: "screen-shots" folder, "MGU Journal.odt".
## Took 3 pictures: 0001-MGU-folder-has-logo.png, 0002-MGU-folder-is-empty.png, 0003-MGU-create-sub-folders.png,    

8:06pm 8/15/2025
ChatGPT said:

Perfect — you’ve just laid down the foundation layer of provenance. That first journal entry is already establishing a forensic-grade record of your build.

Here’s how I’d refine your journal style going forward so every entry is consistent, auditable, and future-proof:

MGU Journal Entry Structure

Timestamp → exact time/date (you’ve got this already).

Actions Taken → concise, past-tense, each step as a bullet or ## line.

Artifacts Created → filenames, screenshots, commit IDs, or Netlify deploy URLs.

Rationale → short notes why you did it (so future you remembers reasoning).

Next Steps → what you plan to do in the next work session.

Refined Example Using Yours

7:45 PM – 8:06 PM | 8/15/2025

Actions Taken

Deleted old GitHub repo.

Saved old site backup to USB.

Created root folder C://MGU.

Added 5 subfolders:

components

images

data

departments

MGU-DOCS

Inside MGU-DOCS, created screen-shots/ and MGU Journal.odt.

Took 3 screenshots:

0001-MGU-folder-has-logo.png

0002-MGU-folder-is-empty.png

0003-MGU-create-sub-folders.png

Rationale

Starting clean from first principles.

Want folder structure documented visually.

Next Steps

Create index.html scaffold at project root.

Decide baseline CSS structure.

Initialize Git locally.

If you keep this format, your journal becomes a living blueprint of your site’s evolution. Later you’ll be able to cross-reference:

Journal entry → Git commit hash → Netlify deploy → Screenshot.

Would you like me to draft a boilerplate journal template you can paste in at the start of every new entry so you never forget a section?

You said:
I have it in ## so I can auto generate posts for a development blog on my site
ChatGPT said:

Smart move — using ## headings means your journal is already structured in Markdown-like syntax. That’s going to make auto-generation into blog posts very straightforward.

If your intent is to feed this into your development blog, here’s how I’d standardize your entries so that they’re machine-parsable and also readable for humans:

Journal Entry Template (Markdown-friendly)
## [Timestamp] [Date]

### Actions Taken
- ...

### Artifacts Created
- ...

### Rationale
- ...

### Next Steps
- ...

Your First Entry Recast for Blog Automation
## 7:45pm – 8:06pm | 8/15/2025

### Actions Taken
- Deleted old GitHub repo.
- Saved old site backup to USB.
- Created root folder `C://MGU`.
- Added 5 subfolders: `components`, `images`, `data`, `departments`, `MGU-DOCS`.
- Inside `MGU-DOCS`, created `screen-shots/` and `MGU Journal.odt`.
- Took 3 screenshots:  
  - `0001-MGU-folder-has-logo.png`  
  - `0002-MGU-folder-is-empty.png`  
  - `0003-MGU-create-sub-folders.png`

### Rationale
- Starting clean from first principles.
- Want folder structure documented visually.

### Artifacts Created
- `MGU Journal.odt` (first entry)
- `0001-MGU-folder-has-logo.png`
- `0002-MGU-folder-is-empty.png`
- `0003-MGU-create-sub-folders.png`

### Next Steps
- Create `index.html` scaffold at project root.
- Decide baseline CSS structure.
- Initialize Git locally.

Why This Works

Machine-friendly → each section has a consistent heading for parsing.

Human-friendly → clean blog posts without editing.

Future-proof → if you later want to export to JSON/YAML, the headings act as delimiters.

Do you want me to also show you how to write a simple Node.js script that will:

Parse these journal entries,

Convert them into HTML,

Auto-append them into a /dev-blog/ section of your site?

You said:
yes
ChatGPT said:

Alright — let’s make your journal → dev blog pipeline. We’ll keep it first principles, clean, and extendable.

1. Folder Setup

In your project root (C://MGU), add:

MGU/
  ├── index.html
  ├── css/
  ├── js/
  ├── images/
  ├── data/
  ├── departments/
  ├── components/
  ├── MGU-DOCS/
  │     └── journal.md   (master journal you type into)
  └── dev-blog/          (auto-generated HTML posts will go here)


You’ll keep writing in MGU-DOCS/journal.md with your ## format.

The script will parse that and generate HTML files inside dev-blog/.

2. Install Tools

You need Node.js + two libraries:

npm init -y
npm install marked gray-matter


marked → converts Markdown to HTML.

gray-matter → (optional) lets you later use metadata if you want (e.g., tags).

3. Script: build-dev-blog.js

Save this in your root (C://MGU/build-dev-blog.js):

const fs = require("fs");
const path = require("path");
const { marked } = require("marked");

// ==== Paths ====
const journalPath = path.join(__dirname, "MGU-DOCS", "journal.md");
const blogDir = path.join(__dirname, "dev-blog");

// ==== Ensure blog dir exists ====
if (!fs.existsSync(blogDir)) {
  fs.mkdirSync(blogDir);
}

// ==== Read Journal ====
const journalContent = fs.readFileSync(journalPath, "utf-8");

// ==== Split Entries ====
// Every entry starts with "##"
const entries = journalContent.split(/^##/m).filter(Boolean);

// ==== Generate HTML Files ====
entries.forEach((entry, i) => {
  const entryContent = "##" + entry.trim();
  const html = `
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>MGU Dev Blog - Entry ${i + 1}</title>
  <link rel="stylesheet" href="../css/style.css" />
</head>
<body>
  <main class="blog-post">
    ${marked.parse(entryContent)}
  </main>
</body>
</html>
  `;

  const filename = `entry-${i + 1}.html`;
  fs.writeFileSync(path.join(blogDir, filename), html);
  console.log(`✅ Generated ${filename}`);
});

// ==== Create Blog Index ====
let indexHTML = `
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>MGU Dev Blog</title>
  <link rel="stylesheet" href="../css/style.css" />
</head>
<body>
  <h1>Development Blog</h1>
  <ul>
`;

entries.forEach((entry, i) => {
  const title = entry.split("\n")[0].trim();
  indexHTML += `<li><a href="entry-${i + 1}.html">${title}</a></li>\n`;
});

indexHTML += `
  </ul>
</body>
</html>
`;

fs.writeFileSync(path.join(blogDir, "index.html"), indexHTML);
console.log("✅ Generated blog index");

4. Usage

Run this from project root:

node build-dev-blog.js


Reads journal.md.

Splits entries by ##.

Makes dev-blog/entry-1.html, entry-2.html, etc.

Builds dev-blog/index.html linking to each entry.

5. Workflow

Keep writing journal entries in MGU-DOCS/journal.md.

When ready, run node build-dev-blog.js.

Deploy to Netlify — your dev blog updates automatically.

⚡ Question: do you want the script to append entries incrementally (new files only) or always regenerate the whole blog from scratch?

You said:
new files only
ChatGPT said:

Got it — we’ll make the script append new entries only instead of regenerating everything. That way, once a blog post exists, it won’t be overwritten.

🔹 Changes to the Script

We’ll:

Check how many entries already exist in dev-blog/.

Generate only the new ones.

Append new links to dev-blog/index.html instead of recreating it.

build-dev-blog.js (incremental version)
const fs = require("fs");
const path = require("path");
const { marked } = require("marked");

// ==== Paths ====
const journalPath = path.join(__dirname, "MGU-DOCS", "journal.md");
const blogDir = path.join(__dirname, "dev-blog");
const indexPath = path.join(blogDir, "index.html");

// ==== Ensure blog dir exists ====
if (!fs.existsSync(blogDir)) {
  fs.mkdirSync(blogDir);
}

// ==== Read Journal ====
const journalContent = fs.readFileSync(journalPath, "utf-8");

// ==== Split Entries ====
// Every entry starts with "##"
const entries = journalContent.split(/^##/m).filter(Boolean);

// ==== Find existing entries ====
const existingFiles = fs.readdirSync(blogDir).filter(f => f.startsWith("entry-"));
const existingCount = existingFiles.length;

// ==== Process only NEW entries ====
const newEntries = entries.slice(existingCount);

newEntries.forEach((entry, i) => {
  const entryNumber = existingCount + i + 1;
  const entryContent = "##" + entry.trim();
  const html = `
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>MGU Dev Blog - Entry ${entryNumber}</title>
  <link rel="stylesheet" href="../css/style.css" />
</head>
<body>
  <main class="blog-post">
    ${marked.parse(entryContent)}
  </main>
</body>
</html>
  `;

  const filename = `entry-${entryNumber}.html`;
  fs.writeFileSync(path.join(blogDir, filename), html);
  console.log(`✅ Generated ${filename}`);

  // Append link to index.html
  let title = entry.split("\n")[0].trim();
  let link = `<li><a href="entry-${entryNumber}.html">${title}</a></li>\n`;

  // If index.html doesn't exist yet, create it
  if (!fs.existsSync(indexPath)) {
    fs.writeFileSync(
      indexPath,
      `
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>MGU Dev Blog</title>
  <link rel="stylesheet" href="../css/style.css" />
</head>
<body>
  <h1>Development Blog</h1>
  <ul>
${link}
  </ul>
</body>
</html>
      `.trim()
    );
  } else {
    // Insert before </ul>
    let indexContent = fs.readFileSync(indexPath, "utf-8");
    indexContent = indexContent.replace("</ul>", `${link}</ul>`);
    fs.writeFileSync(indexPath, indexContent);
  }
});

if (newEntries.length === 0) {
  console.log("ℹ️ No new entries found. Blog is up to date.");
}

How It Works

Reads your journal.md.

Counts how many blog posts already exist.

Generates only the missing ones.

Updates index.html by appending links for new posts.

Workflow

Add a new entry in MGU-DOCS/journal.md (start with ##).

Run:

node build-dev-blog.js


Only the new entry gets turned into a blog post (entry-4.html, entry-5.html, etc.).

index.html grows with new links but doesn’t touch the old ones.

👉 Do you want me to also add automatic timestamps in filenames (e.g., 2025-08-15-entry-4.html) so you can keep chronological order even if you later reorder or edit journal entries?

You said:
yes
ChatGPT said:

Perfect 👍 Adding timestamps to filenames is the cleanest way to keep posts ordered forever, even if you shuffle or edit your journal.md.

We’ll modify the script so that:

Each new entry filename looks like:

2025-08-15-1945-entry-4.html


(That example means Aug 15, 2025 at 7:45 PM, entry #4).

The timestamp comes from the first line of the entry (your ## 7:45pm 8/15/2025) instead of the current system time.

🔹 Updated build-dev-blog.js
const fs = require("fs");
const path = require("path");
const { marked } = require("marked");

// ==== Paths ====
const journalPath = path.join(__dirname, "MGU-DOCS", "journal.md");
const blogDir = path.join(__dirname, "dev-blog");
const indexPath = path.join(blogDir, "index.html");

// ==== Ensure blog dir exists ====
if (!fs.existsSync(blogDir)) {
  fs.mkdirSync(blogDir);
}

// ==== Read Journal ====
const journalContent = fs.readFileSync(journalPath, "utf-8");

// ==== Split Entries ====
// Every entry starts with "##"
const entries = journalContent.split(/^##/m).filter(Boolean);

// ==== Find existing entries ====
const existingFiles = fs.readdirSync(blogDir).filter(f => f.includes("entry-"));
const existingCount = existingFiles.length;

// ==== Helper: format timestamp ====
function parseTimestamp(headerLine) {
  // Example header: "7:45pm 8/15/2025"
  const match = headerLine.match(/(\d{1,2}:\d{2})(am|pm)?\s+(\d{1,2})\/(\d{1,2})\/(\d{4})/i);
  if (!match) return "unknown-date";

  let [ , time, ampm, month, day, year ] = match;
  let [hour, minute] = time.split(":").map(Number);

  if (ampm && ampm.toLowerCase() === "pm" && hour < 12) hour += 12;
  if (ampm && ampm.toLowerCase() === "am" && hour === 12) hour = 0;

  const hh = String(hour).padStart(2, "0");
  const mm = String(minute).padStart(2, "0");
  const MM = String(month).padStart(2, "0");
  const DD = String(day).padStart(2, "0");

  return `${year}-${MM}-${DD}-${hh}${mm}`;
}

// ==== Process only NEW entries ====
const newEntries = entries.slice(existingCount);

newEntries.forEach((entry, i) => {
  const entryNumber = existingCount + i + 1;
  const lines = entry.trim().split("\n");
  const headerLine = lines[0].trim(); // first line (timestamp)
  const timestamp = parseTimestamp(headerLine);
  const entryContent = "##" + entry.trim();

  const filename = `${timestamp}-entry-${entryNumber}.html`;
  const html = `
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>MGU Dev Blog - Entry ${entryNumber}</title>
  <link rel="stylesheet" href="../css/style.css" />
</head>
<body>
  <main class="blog-post">
    ${marked.parse(entryContent)}
  </main>
</body>
</html>
  `;

  fs.writeFileSync(path.join(blogDir, filename), html);
  console.log(`✅ Generated ${filename}`);

  // Append link to index.html
  let link = `<li><a href="${filename}">${headerLine}</a></li>\n`;

  // If index.html doesn't exist yet, create it
  if (!fs.existsSync(indexPath)) {
    fs.writeFileSync(
      indexPath,
      `
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>MGU Dev Blog</title>
  <link rel="stylesheet" href="../css/style.css" />
</head>
<body>
  <h1>Development Blog</h1>
  <ul>
${link}
  </ul>
</body>
</html>
      `.trim()
    );
  } else {
    // Insert before </ul>
    let indexContent = fs.readFileSync(indexPath, "utf-8");
    indexContent = indexContent.replace("</ul>", `${link}</ul>`);
    fs.writeFileSync(indexPath, indexContent);
  }
});

if (newEntries.length === 0) {
  console.log("ℹ️ No new entries found. Blog is up to date.");
}

🔹 Example Run

Your journal.md starts like:

## 7:45pm 8/15/2025

### Actions Taken
- Deleted GitHub repo.


The script generates:

dev-blog/2025-08-15-1945-entry-1.html


And your index.html gets:

<ul>
  <li><a href="2025-08-15-1945-entry-1.html">7:45pm 8/15/2025</a></li>
</ul>


✅ Result: every entry has a unique, chronological, timestamped filename, and your index stays clean.

Do you also want me to make the blog index reverse-chronological (newest entry at the top), like a real dev blog?

You said:
yes
ChatGPT said:

Great — we’ll flip the index so newest entries appear at the top.
That way, your dev blog always feels “live,” like real blogs do.

🔹 Updated build-dev-blog.js (reverse-chronological index)
const fs = require("fs");
const path = require("path");
const { marked } = require("marked");

// ==== Paths ====
const journalPath = path.join(__dirname, "MGU-DOCS", "journal.md");
const blogDir = path.join(__dirname, "dev-blog");
const indexPath = path.join(blogDir, "index.html");

// ==== Ensure blog dir exists ====
if (!fs.existsSync(blogDir)) {
  fs.mkdirSync(blogDir);
}

// ==== Read Journal ====
const journalContent = fs.readFileSync(journalPath, "utf-8");

// ==== Split Entries ====
// Every entry starts with "##"
const entries = journalContent.split(/^##/m).filter(Boolean);

// ==== Find existing entries ====
const existingFiles = fs.readdirSync(blogDir).filter(f => f.includes("entry-"));
const existingCount = existingFiles.length;

// ==== Helper: format timestamp ====
function parseTimestamp(headerLine) {
  // Example header: "7:45pm 8/15/2025"
  const match = headerLine.match(/(\d{1,2}):(\d{2})(am|pm)?\s+(\d{1,2})\/(\d{1,2})\/(\d{4})/i);
  if (!match) return "unknown-date";

  let [, hourStr, minuteStr, ampm, month, day, year] = match;
  let hour = parseInt(hourStr, 10);
  const minute = parseInt(minuteStr, 10);

  if (ampm && ampm.toLowerCase() === "pm" && hour < 12) hour += 12;
  if (ampm && ampm.toLowerCase() === "am" && hour === 12) hour = 0;

  const hh = String(hour).padStart(2, "0");
  const mm = String(minute).padStart(2, "0");
  const MM = String(month).padStart(2, "0");
  const DD = String(day).padStart(2, "0");

  return `${year}-${MM}-${DD}-${hh}${mm}`;
}

// ==== Process only NEW entries ====
const newEntries = entries.slice(existingCount);

// ==== Collect all links (existing + new) ====
let links = [];

// If index exists, load current links
if (fs.existsSync(indexPath)) {
  const oldContent = fs.readFileSync(indexPath, "utf-8");
  const match = oldContent.match(/<ul>([\s\S]*?)<\/ul>/);
  if (match) {
    links = match[1].trim().split("\n").filter(Boolean);
  }
}

newEntries.forEach((entry, i) => {
  const entryNumber = existingCount + i + 1;
  const lines = entry.trim().split("\n");
  const headerLine = lines[0].trim(); // first line (timestamp)
  const timestamp = parseTimestamp(headerLine);
  const entryContent = "##" + entry.trim();

  const filename = `${timestamp}-entry-${entryNumber}.html`;
  const html = `
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>MGU Dev Blog - Entry ${entryNumber}</title>
  <link rel="stylesheet" href="../css/style.css" />
</head>
<body>
  <main class="blog-post">
    ${marked.parse(entryContent)}
  </main>
</body>
</html>
  `;

  fs.writeFileSync(path.join(blogDir, filename), html);
  console.log(`✅ Generated ${filename}`);

  // Add link for this entry
  let link = `<li><a href="${filename}">${headerLine}</a></li>`;
  // Put new entry at TOP of list
  links.unshift(link);
});

// ==== Rewrite index.html (with reverse chronological order) ====
if (entries.length > 0) {
  const indexHTML = `
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>MGU Dev Blog</title>
  <link rel="stylesheet" href="../css/style.css" />
</head>
<body>
  <h1>Development Blog</h1>
  <ul>
${links.join("\n")}
  </ul>
</body>
</html>
  `.trim();

  fs.writeFileSync(indexPath, indexHTML);
  console.log("✅ Updated blog index (newest first)");
}

if (newEntries.length === 0) {
  console.log("ℹ️ No new entries found. Blog is up to date.");
}

🔹 Key Changes

New entries prepend (links.unshift) instead of append.

Index is rebuilt each run with newest entries first.

Old posts are untouched in their HTML files, only the index order changes.

🔹 Example

Say you have 3 entries in journal.md:

## 7:45pm 8/15/2025
## 8:06pm 8/15/2025
## 9:15pm 8/15/2025


Your index.html will list:

<ul>
  <li><a href="2025-08-15-2115-entry-3.html">9:15pm 8/15/2025</a></li>
  <li><a href="2025-08-15-2006-entry-2.html">8:06pm 8/15/2025</a></li>
  <li><a href="2025-08-15-1945-entry-1.html">7:45pm 8/15/2025</a></li>
</ul>


⚡ Do you want me to also make each entry page include “Previous” / “Next” navigation links so you can read the dev blog like a book?

You said:
yes
ChatGPT said:

Excellent — let’s add “Previous” / “Next” navigation links at the bottom of each entry page. That way your dev blog is not just an index but also flows like a journal/book.

🔹 How We’ll Do It

When generating each entry, the script will know its previous and next filenames.

At the bottom of the HTML, we’ll add links like:

<nav class="post-nav">
  <a href="2025-08-15-1945-entry-1.html">← Previous</a>
  <a href="2025-08-15-2006-entry-2.html">Next →</a>
</nav>


Styling can be handled in your CSS later (e.g., flexbox row with spacing).

🔹 Updated build-dev-blog.js
const fs = require("fs");
const path = require("path");
const { marked } = require("marked");

// ==== Paths ====
const journalPath = path.join(__dirname, "MGU-DOCS", "journal.md");
const blogDir = path.join(__dirname, "dev-blog");
const indexPath = path.join(blogDir, "index.html");

// ==== Ensure blog dir exists ====
if (!fs.existsSync(blogDir)) {
  fs.mkdirSync(blogDir);
}

// ==== Read Journal ====
const journalContent = fs.readFileSync(journalPath, "utf-8");

// ==== Split Entries ====
// Every entry starts with "##"
const entries = journalContent.split(/^##/m).filter(Boolean);

// ==== Helper: format timestamp ====
function parseTimestamp(headerLine) {
  // Example header: "7:45pm 8/15/2025"
  const match = headerLine.match(/(\d{1,2}):(\d{2})(am|pm)?\s+(\d{1,2})\/(\d{1,2})\/(\d{4})/i);
  if (!match) return "unknown-date";

  let [, hourStr, minuteStr, ampm, month, day, year] = match;
  let hour = parseInt(hourStr, 10);
  const minute = parseInt(minuteStr, 10);

  if (ampm && ampm.toLowerCase() === "pm" && hour < 12) hour += 12;
  if (ampm && ampm.toLowerCase() === "am" && hour === 12) hour = 0;

  const hh = String(hour).padStart(2, "0");
  const mm = String(minute).padStart(2, "0");
  const MM = String(month).padStart(2, "0");
  const DD = String(day).padStart(2, "0");

  return `${year}-${MM}-${DD}-${hh}${mm}`;
}

// ==== Build all posts (so we can link them properly) ====
let posts = [];

entries.forEach((entry, i) => {
  const lines = entry.trim().split("\n");
  const headerLine = lines[0].trim(); // first line (timestamp)
  const timestamp = parseTimestamp(headerLine);
  const entryContent = "##" + entry.trim();

  posts.push({
    number: i + 1,
    header: headerLine,
    timestamp,
    content: marked.parse(entryContent),
  });
});

// ==== Generate HTML for each post ====
posts.forEach((post, i) => {
  const filename = `${post.timestamp}-entry-${post.number}.html`;

  // Previous & Next
  const prevPost = posts[i - 1];
  const nextPost = posts[i + 1];

  let navLinks = `<nav class="post-nav">`;
  if (prevPost) {
    navLinks += `<a href="${prevPost.timestamp}-entry-${prevPost.number}.html">← Previous</a>`;
  }
  if (nextPost) {
    navLinks += `<a href="${nextPost.timestamp}-entry-${nextPost.number}.html" style="float:right;">Next →</a>`;
  }
  navLinks += `</nav>`;

  const html = `
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>MGU Dev Blog - Entry ${post.number}</title>
  <link rel="stylesheet" href="../css/style.css" />
  <style>
    .post-nav {
      display: flex;
      justify-content: space-between;
      margin-top: 2rem;
      padding-top: 1rem;
      border-top: 1px solid #ccc;
    }
  </style>
</head>
<body>
  <main class="blog-post">
    ${post.content}
    ${navLinks}
  </main>
</body>
</html>
  `;

  fs.writeFileSync(path.join(blogDir, filename), html);
  console.log(`✅ Generated ${filename}`);
});

// ==== Build reverse-chronological index ====
let links = posts
  .slice() // copy
  .reverse()
  .map(
    (post) =>
      `<li><a href="${post.timestamp}-entry-${post.number}.html">${post.header}</a></li>`
  );

const indexHTML = `
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>MGU Dev Blog</title>
  <link rel="stylesheet" href="../css/style.css" />
</head>
<body>
  <h1>Development Blog</h1>
  <ul>
${links.join("\n")}
  </ul>
</body>
</html>
`.trim();

fs.writeFileSync(indexPath, indexHTML);
console.log("✅ Updated blog index (newest first)");

🔹 Example

If your journal.md has 3 entries:

7:45pm 8/15/2025

8:06pm 8/15/2025

9:15pm 8/15/2025

Then:

Entry 1 has only Next → link.

Entry 2 has both ← Previous and Next → links.

Entry 3 has only ← Previous link.

Index shows newest first (9:15pm, 8:06pm, 7:45pm).

⚡ Do you want me to also add a link back to the blog index at the bottom of each entry page (so visitors can always jump back)?

You said:
yes
ChatGPT said:

Perfect 👌 Adding a link back to the blog index is the last piece to make each entry self-contained.
Now every post will have:

← Previous (if any)

Next → (if any)

↩ Back to Blog Index (always present)

🔹 Final build-dev-blog.js
const fs = require("fs");
const path = require("path");
const { marked } = require("marked");

// ==== Paths ====
const journalPath = path.join(__dirname, "MGU-DOCS", "journal.md");
const blogDir = path.join(__dirname, "dev-blog");
const indexPath = path.join(blogDir, "index.html");

// ==== Ensure blog dir exists ====
if (!fs.existsSync(blogDir)) {
  fs.mkdirSync(blogDir);
}

// ==== Read Journal ====
const journalContent = fs.readFileSync(journalPath, "utf-8");

// ==== Split Entries ====
// Every entry starts with "##"
const entries = journalContent.split(/^##/m).filter(Boolean);

// ==== Helper: format timestamp ====
function parseTimestamp(headerLine) {
  // Example header: "7:45pm 8/15/2025"
  const match = headerLine.match(/(\d{1,2}):(\d{2})(am|pm)?\s+(\d{1,2})\/(\d{1,2})\/(\d{4})/i);
  if (!match) return "unknown-date";

  let [, hourStr, minuteStr, ampm, month, day, year] = match;
  let hour = parseInt(hourStr, 10);
  const minute = parseInt(minuteStr, 10);

  if (ampm && ampm.toLowerCase() === "pm" && hour < 12) hour += 12;
  if (ampm && ampm.toLowerCase() === "am" && hour === 12) hour = 0;

  const hh = String(hour).padStart(2, "0");
  const mm = String(minute).padStart(2, "0");
  const MM = String(month).padStart(2, "0");
  const DD = String(day).padStart(2, "0");

  return `${year}-${MM}-${DD}-${hh}${mm}`;
}

// ==== Build all posts (so we can link them properly) ====
let posts = [];

entries.forEach((entry, i) => {
  const lines = entry.trim().split("\n");
  const headerLine = lines[0].trim(); // first line (timestamp)
  const timestamp = parseTimestamp(headerLine);
  const entryContent = "##" + entry.trim();

  posts.push({
    number: i + 1,
    header: headerLine,
    timestamp,
    content: marked.parse(entryContent),
  });
});

// ==== Generate HTML for each post ====
posts.forEach((post, i) => {
  const filename = `${post.timestamp}-entry-${post.number}.html`;

  // Previous & Next
  const prevPost = posts[i - 1];
  const nextPost = posts[i + 1];

  let navLinks = `<nav class="post-nav">`;
  if (prevPost) {
    navLinks += `<a href="${prevPost.timestamp}-entry-${prevPost.number}.html">← Previous</a>`;
  }
  navLinks += `<a href="index.html" style="margin: 0 auto;">↩ Back to Blog Index</a>`;
  if (nextPost) {
    navLinks += `<a href="${nextPost.timestamp}-entry-${nextPost.number}.html">Next →</a>`;
  }
  navLinks += `</nav>`;

  const html = `
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>MGU Dev Blog - Entry ${post.number}</title>
  <link rel="stylesheet" href="../css/style.css" />
  <style>
    .post-nav {
      display: flex;
      justify-content: space-between;
      margin-top: 2rem;
      padding-top: 1rem;
      border-top: 1px solid #ccc;
    }
    .post-nav a {
      text-decoration: none;
      color: #0066cc;
    }
  </style>
</head>
<body>
  <main class="blog-post">
    ${post.content}
    ${navLinks}
  </main>
</body>
</html>
  `;

  fs.writeFileSync(path.join(blogDir, filename), html);
  console.log(`✅ Generated ${filename}`);
});

// ==== Build reverse-chronological index ====
let links = posts
  .slice()
  .reverse()
  .map(
    (post) =>
      `<li><a href="${post.timestamp}-entry-${post.number}.html">${post.header}</a></li>`
  );

const indexHTML = `
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>MGU Dev Blog</title>
  <link rel="stylesheet" href="../css/style.css" />
</head>
<body>
  <h1>Development Blog</h1>
  <ul>
${links.join("\n")}
  </ul>
</body>
</html>
`.trim();

fs.writeFileSync(indexPath, indexHTML);
console.log("✅ Updated blog index (newest first)");

🔹 Navigation Behavior

For example, if you have 3 entries:

Entry 1 (7:45pm) → [↩ Back to Blog Index] + Next →

Entry 2 (8:06pm) → ← Previous + [↩ Back to Blog Index] + Next →

Entry 3 (9:15pm) → ← Previous + [↩ Back to Blog Index]

And index.html always shows newest first.

⚡ Do you want me to also add a global header + footer template (so every blog entry matches your main site layout automatically), or keep entries “plain” for now?