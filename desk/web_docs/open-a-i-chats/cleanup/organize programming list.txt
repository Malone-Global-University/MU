Skip to content
Chat history

You said:
1. HTML- used for formatting text on static websites. Very easy to learn. Start here.
2. CSS- use for styling HTML so that it looks better and is more functional. 
3. Javascript- used for "programming? Websites so that they have functions like dynamic buttons that perform app-like tasks.
4. Python- uses a command line interface to make apps or perform tasks. Journey into app building begins here.
5. SQL- used for building databased based of form data. Forms contain fields like name/email/phone# for contact lists. Databases are tables of information that programs use to organize form data.
6. Basic- A beginners language for making simple programs and learning syntax before moving to C, and then C++ or C#.
7. Java- an intermidiete scripting language taught in college used to practice concepts in computer science degrees. It is used in many real world applications most notable ATMs. 
8. PHP- a simple but powerful language that is used for web development of dynamic webpages. Things like sending emails, collecting webforms, ecommerce, adding interactivity to static pages.
9. C- basic version of the C family of languages used to learn how to build backend logic and access program memory. 
10. C++ - advanced version of C family of languages used to build full enterprise software and have greater control over memory to increase oerfirmance. C++ is used in any type of full for sale commercial programs that users downloiad and run directly off their computer, things like productivity software to memory intensive video games.
11. C#- Microsoft version of C used for networking and adminstractive website duties and team build projects.
12. Bootstrap- a CSS framwork for building prfessional looking websites faster.
13. React- a JavaScript library for building user interfaces.
14. MySQL is a very popular open-source relational database management system (RDBMS).
15. The purpose of jQuery is to make it much easier to use JavaScript on your website.
16. Excel is the world's most used spreadsheet program
17. XML is a software- and hardware-independent tool for storing and transporting data.
18. Django is a back-end server side web framework.


19. NumPy is a Python library used for working with arrays. It stands for Numerical Python, it does math.
20. Panda is a pythong lirary for Pandas is a Python library used for working with data sets. It is a tool of data scientists.

21. Node.js is a free, open source tool that lets you run JavaScript outside the web browser. This is helpful in server design.

22. DSA- Data Structures and Algorithms (DSA) is a fundamental part of Computer Science that teaches you how to think and solve complex problems systematically.
23. AngularJS is a JavaScript framework. It can be added to an HTML page with a <script> tag. AngularJS extends HTML attributes with Directives, and binds data to HTML with Expressions.
24. Git works on your computer, but you also use it with online services like GitHub, GitLab, or Bitbucket to share your work with others. These are called remote repositories. 
25. PostgreSQL is an free open-source database system that supports both relational (SQL) and non-relational (JSON) queries.
PostgreSQL is a back-end database for dynamic websites and web applications.
PostgreSQL supports the most important programming languages:
Python
Java
C/C++
C#
Node.js
Go
Ruby
Perl
Tcl
26. MongoDB is a document database. It stores data in a type of JSON format called BSON. 
27. ASP stands for Active Server Pages
ASP is a development framework for building web pages.
28. Machine Learning is a subfield of Artificial intelligence 
29. R is a programming language.
R is often used for statistical computing and graphical presentation to analyze and visualize data.

30. Go is a fast, statically typed, compiled language known for its simplicity and efficiency
31. Kotlin is easy to learn, especially if you already know Java (it is 100% compatible with Java).
32. Sass is a CSS pre-processor. Sass reduces repetition of CSS and therefore saves time
33. Vue is a popular JavaScript framework.
34. Generative AI can help boost your productivity if used correctly.
35. SciPy is a scientific computation library that uses NumPy underneath.
36. Data Science is a combination of multiple disciplines that uses statistics, data analysis, and machine learning to analyze data and to extract knowledge and insights from it. 
37. Bash is used to write scripts and run commands on Linux systems.
It helps automate tasks, manage system operations, and boost productivity.
1. Rust is a popular programming language used to build everything from web servers to game engines. Rust is known for being very fast, and is similar to C and C++ in language.


ChatGPT said:
Looks like you’ve compiled a massive list of programming languages, frameworks, and tools with short descriptions — but it’s a bit inconsistent in formatting, grammar, and numbering.

If you want, I can reorganize this into:

Corrected grammar and spelling

Consistent numbering and style

Grouped into categories (Languages, Web Development, Databases, Frameworks, Tools, etc.)

Short, clear definitions

This would make it cleaner for teaching purposes on your site.

Do you want me to keep it as one big numbered list or split into categories?

You said:
group into categories
ChatGPT said:
Got it — here’s your list grouped into clear categories with corrected grammar, consistent style, and a bit more polish so it’s classroom-ready.

1. Core Web Development
HTML – Formats text and content for static websites. Very easy to learn.

CSS – Styles HTML so it looks better and is more functional.

JavaScript – Adds dynamic, interactive features like buttons, animations, and app-like behavior.

Bootstrap – A CSS framework for building professional-looking websites faster.

React – A JavaScript library for building user interfaces.

jQuery – Makes JavaScript easier to write and use across browsers.

AngularJS – A JavaScript framework that extends HTML with directives and binds data to HTML with expressions.

Vue – A popular JavaScript framework for building user interfaces.

Sass – A CSS preprocessor that reduces repetition and speeds up styling.

2. Programming Languages
Python – A versatile language for apps, automation, data science, and web development.

Basic – An introductory language for learning programming syntax.

C – A foundational programming language for backend logic and memory management.

C++ – An advanced version of C for building high-performance software and games.

C# – Microsoft’s C-family language for applications, websites, and enterprise software.

Java – A widely used language for enterprise systems, Android apps, and embedded devices like ATMs.

PHP – A web development language for dynamic pages, forms, e-commerce, and interactivity.

Go – A fast, compiled language known for simplicity and efficiency.

Kotlin – A modern, Java-compatible language often used for Android apps.

Rust – A high-performance language for web servers, system tools, and game engines.

R – A language for statistical computing, data analysis, and visualization.

Bash – A scripting language for automating tasks on Linux and Unix systems.

3. Databases
SQL – Language for managing and querying relational databases.

MySQL – A popular open-source relational database management system (RDBMS).

PostgreSQL – An open-source database supporting SQL and JSON queries, used for dynamic websites and apps.

MongoDB – A document-based database storing data in BSON (JSON-like format).

4. Backend & Server-Side
Node.js – Runs JavaScript outside the browser, often for backend development.

Django – A Python-based backend web framework.

ASP (Active Server Pages) – A Microsoft framework for building dynamic web pages.

5. Data Science & AI
NumPy – A Python library for numerical and array-based computations.

Pandas – A Python library for working with datasets and data analysis.

SciPy – A scientific computing library built on NumPy.

Machine Learning – A subfield of AI for building systems that learn from data.

Data Science – Combines statistics, analysis, and machine learning to extract insights from data.

Generative AI – AI models that can produce text, images, code, and other creative outputs.

6. Development Tools
Git – A version control system for tracking code changes locally.

GitHub/GitLab/Bitbucket – Remote repositories for storing and collaborating on code.

Excel – A spreadsheet program for organizing and analyzing data.

XML – A markup language for storing and transporting data.

DSA (Data Structures & Algorithms) – Fundamental CS concepts for solving problems efficiently.

If you like, I can make a version with a short 1-line example for each (e.g., “HTML → <h1>Hello World</h1>”) so it’s more interactive for students. That would make it easier for learners on your site to connect the description to actual usage.

Do you want me to make that enhanced example version next?

You said:
yes
ChatGPT said:
Alright — here’s the grouped & polished list with short one-line code or usage examples so your students can instantly connect the description to a real snippet.

1. Core Web Development
HTML – Formats text and content for static websites.
Example: <h1>Welcome to Malone University</h1>

CSS – Styles HTML so it looks better and is more functional.
Example: h1 { color: blue; font-size: 2em; }

JavaScript – Adds dynamic, interactive features to web pages.
Example: alert("Hello, World!");

Bootstrap – CSS framework for building responsive websites quickly.
Example: <button class="btn btn-primary">Click Me</button>

React – JavaScript library for building user interfaces.
Example: const App = () => <h1>Hello React!</h1>;

jQuery – Makes JavaScript easier to write.
Example: $("#demo").hide();

AngularJS – JavaScript framework for dynamic web apps.
Example: <p ng-bind="name"></p>

Vue – JavaScript framework for building UIs.
Example: <p>{{ message }}</p>

Sass – CSS preprocessor for faster styling.
Example: $primary: blue; body { color: $primary; }

2. Programming Languages
Python – General-purpose language for apps, automation, and data.
Example: print("Hello, World!")

Basic – Beginner’s language for learning syntax.
Example: PRINT "Hello World"

C – Foundational language for systems programming.
Example: printf("Hello, World!\n");

C++ – High-performance programming for games and software.
Example: std::cout << "Hello, World!" << std::endl;

C# – Microsoft’s language for apps and enterprise solutions.
Example: Console.WriteLine("Hello, World!");

Java – Widely used for enterprise apps and Android.
Example: System.out.println("Hello, World!");

PHP – Server-side scripting for dynamic websites.
Example: <?php echo "Hello, World!"; ?>

Go – Fast, compiled language for modern apps.
Example: fmt.Println("Hello, World!")

Kotlin – Modern language compatible with Java.
Example: println("Hello, World!")

Rust – High-performance systems language.
Example: println!("Hello, World!");

R – Language for statistics and data visualization.
Example: print("Hello, World!")

Bash – Scripting language for Linux command automation.
Example: echo "Hello, World!"

3. Databases
SQL – Language for managing and querying databases.
Example: SELECT * FROM users;

MySQL – Popular open-source relational database.
Example: CREATE DATABASE school;

PostgreSQL – Advanced open-source database supporting SQL & JSON.
Example: SELECT name->>'first' FROM students;

MongoDB – NoSQL database storing JSON-like documents.
Example: db.students.insertOne({ name: "John" });

4. Backend & Server-Side
Node.js – Runs JavaScript on the server.
Example: console.log("Server running...");

Django – Python backend framework for web apps.
Example: urlpatterns = [path('', views.home)]

ASP (Active Server Pages) – Microsoft’s framework for dynamic sites.
Example: <% Response.Write("Hello, World!") %>

5. Data Science & AI
NumPy – Python library for numerical computing.
Example: import numpy as np; np.array([1,2,3])

Pandas – Python library for working with datasets.
Example: import pandas as pd; pd.DataFrame({"Name":["John"]})

SciPy – Scientific computing library built on NumPy.
Example: from scipy import stats

Machine Learning – AI that learns from data.
Example: model.fit(X_train, y_train)

Data Science – Using statistics, analysis, and ML for insights.
Example: import seaborn as sns; sns.pairplot(data)

Generative AI – AI that creates text, images, or code.
Example: ai.generate("Write a poem about the ocean")

6. Development Tools
Git – Version control for tracking code changes.
Example: git commit -m "Initial commit"

GitHub/GitLab/Bitbucket – Remote code repositories.
Example: Push code to GitHub with: git push origin main

Excel – Spreadsheet program for organizing data.
Example: =SUM(A1:A10)

XML – Markup language for storing data.
Example: <user><name>John</name></user>

DSA (Data Structures & Algorithms) – Core CS concepts for problem-solving.
Example: stack = [1, 2, 3] # Push and pop elements

I can also make this into a nicely formatted HTML table for your Malone University site — so each row has Name, Category, Description, and Example Code, all styled to match your theme.

That way, students could filter/search the list live in the browser.

Do you want me to go ahead and turn this into the HTML version?

You said:
yes
ChatGPT said:
Perfect — here’s a ready-to-use HTML table for Malone University’s site.
It matches your style philosophy (clean, minimal, responsive) and keeps each skill in a Category / Name / Description / Example layout.

<section>
  <h2>Programming & Tech Skills</h2>
  <table class="skills-table">
    <thead>
      <tr>
        <th>Category</th>
        <th>Skill</th>
        <th>Description</th>
        <th>Example</th>
      </tr>
    </thead>
    <tbody>
      <!-- Core Web Development -->
      <tr>
        <td>Core Web Development</td>
        <td>HTML</td>
        <td>Formats text and content for static websites.</td>
        <td><code>&lt;h1&gt;Welcome to Malone University&lt;/h1&gt;</code></td>
      </tr>
      <tr>
        <td>Core Web Development</td>
        <td>CSS</td>
        <td>Styles HTML to make it look better and be more functional.</td>
        <td><code>h1 { color: blue; }</code></td>
      </tr>
      <tr>
        <td>Core Web Development</td>
        <td>JavaScript</td>
        <td>Adds dynamic, interactive features to web pages.</td>
        <td><code>alert("Hello, World!");</code></td>
      </tr>
      <tr>
        <td>Core Web Development</td>
        <td>Bootstrap</td>
        <td>CSS framework for building responsive websites quickly.</td>
        <td><code>&lt;button class="btn btn-primary"&gt;Click Me&lt;/button&gt;</code></td>
      </tr>
      <tr>
        <td>Core Web Development</td>
        <td>React</td>
        <td>JavaScript library for building user interfaces.</td>
        <td><code>const App = () =&gt; &lt;h1&gt;Hello React!&lt;/h1&gt;;</code></td>
      </tr>
      <tr>
        <td>Core Web Development</td>
        <td>jQuery</td>
        <td>Makes JavaScript easier to write.</td>
        <td><code>$("#demo").hide();</code></td>
      </tr>
      <tr>
        <td>Core Web Development</td>
        <td>AngularJS</td>
        <td>JavaScript framework for dynamic web apps.</td>
        <td><code>&lt;p ng-bind="name"&gt;&lt;/p&gt;</code></td>
      </tr>
      <tr>
        <td>Core Web Development</td>
        <td>Vue</td>
        <td>JavaScript framework for building UIs.</td>
        <td><code>&lt;p&gt;{{ message }}&lt;/p&gt;</code></td>
      </tr>
      <tr>
        <td>Core Web Development</td>
        <td>Sass</td>
        <td>CSS preprocessor for faster styling.</td>
        <td><code>$primary: blue; body { color: $primary; }</code></td>
      </tr>

      <!-- Programming Languages -->
      <tr>
        <td>Programming Languages</td>
        <td>Python</td>
        <td>General-purpose language for apps, automation, and data.</td>
        <td><code>print("Hello, World!")</code></td>
      </tr>
      <tr>
        <td>Programming Languages</td>
        <td>Basic</td>
        <td>Beginner’s language for learning syntax.</td>
        <td><code>PRINT "Hello World"</code></td>
      </tr>
      <tr>
        <td>Programming Languages</td>
        <td>C</td>
        <td>Foundational language for systems programming.</td>
        <td><code>printf("Hello, World!\n");</code></td>
      </tr>
      <tr>
        <td>Programming Languages</td>
        <td>C++</td>
        <td>High-performance programming for games and software.</td>
        <td><code>std::cout &lt;&lt; "Hello, World!" &lt;&lt; std::endl;</code></td>
      </tr>
      <tr>
        <td>Programming Languages</td>
        <td>C#</td>
        <td>Microsoft’s language for apps and enterprise solutions.</td>
        <td><code>Console.WriteLine("Hello, World!");</code></td>
      </tr>
      <tr>
        <td>Programming Languages</td>
        <td>Java</td>
        <td>Widely used for enterprise apps and Android.</td>
        <td><code>System.out.println("Hello, World!");</code></td>
      </tr>
      <tr>
        <td>Programming Languages</td>
        <td>PHP</td>
        <td>Server-side scripting for dynamic websites.</td>
        <td><code>&lt;?php echo "Hello, World!"; ?&gt;</code></td>
      </tr>
      <tr>
        <td>Programming Languages</td>
        <td>Go</td>
        <td>Fast, compiled language for modern apps.</td>
        <td><code>fmt.Println("Hello, World!")</code></td>
      </tr>
      <tr>
        <td>Programming Languages</td>
        <td>Kotlin</td>
        <td>Modern language compatible with Java.</td>
        <td><code>println("Hello, World!")</code></td>
      </tr>
      <tr>
        <td>Programming Languages</td>
        <td>Rust</td>
        <td>High-performance systems language.</td>
        <td><code>println!("Hello, World!");</code></td>
      </tr>
      <tr>
        <td>Programming Languages</td>
        <td>R</td>
        <td>Language for statistics and data visualization.</td>
        <td><code>print("Hello, World!")</code></td>
      </tr>
      <tr>
        <td>Programming Languages</td>
        <td>Bash</td>
        <td>Scripting language for Linux command automation.</td>
        <td><code>echo "Hello, World!"</code></td>
      </tr>
    </tbody>
  </table>
</section>

<style>
  .skills-table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 1em;
    background: var(--bg, #fff);
    color: var(--text, #000);
  }
  .skills-table th, .skills-table td {
    border: 1px solid var(--border, #ccc);
    padding: 8px;
    text-align: left;
    vertical-align: top;
  }
  .skills-table th {
    background: var(--accent, #333);
    color: white;
  }
  .skills-table code {
    background: rgba(0,0,0,0.05);
    padding: 2px 4px;
    border-radius: 4px;
    font-family: monospace;
  }
</style>
This is only the first two categories so the message doesn’t get too long — I can continue the table for Databases, Backend & Server-Side, Data Science & AI, and Development Tools so the whole thing is complete.

Do you want me to finish the remaining categories in the same table style?

You said:
yes
ChatGPT said:
Alright — here’s the full HTML table with all categories completed so you can drop it straight into your Malone University site.
It keeps the same clean, responsive style, and supports your dark/light theme variables.

<section>
  <h2>Programming & Tech Skills</h2>
  <table class="skills-table">
    <thead>
      <tr>
        <th>Category</th>
        <th>Skill</th>
        <th>Description</th>
        <th>Example</th>
      </tr>
    </thead>
    <tbody>
      <!-- Core Web Development -->
      <tr>
        <td>Core Web Development</td>
        <td>HTML</td>
        <td>Formats text and content for static websites.</td>
        <td><code>&lt;h1&gt;Welcome to Malone University&lt;/h1&gt;</code></td>
      </tr>
      <tr>
        <td>Core Web Development</td>
        <td>CSS</td>
        <td>Styles HTML to make it look better and be more functional.</td>
        <td><code>h1 { color: blue; }</code></td>
      </tr>
      <tr>
        <td>Core Web Development</td>
        <td>JavaScript</td>
        <td>Adds dynamic, interactive features to web pages.</td>
        <td><code>alert("Hello, World!");</code></td>
      </tr>
      <tr>
        <td>Core Web Development</td>
        <td>Bootstrap</td>
        <td>CSS framework for building responsive websites quickly.</td>
        <td><code>&lt;button class="btn btn-primary"&gt;Click Me&lt;/button&gt;</code></td>
      </tr>
      <tr>
        <td>Core Web Development</td>
        <td>React</td>
        <td>JavaScript library for building user interfaces.</td>
        <td><code>const App = () =&gt; &lt;h1&gt;Hello React!&lt;/h1&gt;;</code></td>
      </tr>
      <tr>
        <td>Core Web Development</td>
        <td>jQuery</td>
        <td>Makes JavaScript easier to write.</td>
        <td><code>$("#demo").hide();</code></td>
      </tr>
      <tr>
        <td>Core Web Development</td>
        <td>AngularJS</td>
        <td>JavaScript framework for dynamic web apps.</td>
        <td><code>&lt;p ng-bind="name"&gt;&lt;/p&gt;</code></td>
      </tr>
      <tr>
        <td>Core Web Development</td>
        <td>Vue</td>
        <td>JavaScript framework for building UIs.</td>
        <td><code>&lt;p&gt;{{ message }}&lt;/p&gt;</code></td>
      </tr>
      <tr>
        <td>Core Web Development</td>
        <td>Sass</td>
        <td>CSS preprocessor for faster styling.</td>
        <td><code>$primary: blue; body { color: $primary; }</code></td>
      </tr>

      <!-- Programming Languages -->
      <tr>
        <td>Programming Languages</td>
        <td>Python</td>
        <td>General-purpose language for apps, automation, and data.</td>
        <td><code>print("Hello, World!")</code></td>
      </tr>
      <tr>
        <td>Programming Languages</td>
        <td>Basic</td>
        <td>Beginner’s language for learning syntax.</td>
        <td><code>PRINT "Hello World"</code></td>
      </tr>
      <tr>
        <td>Programming Languages</td>
        <td>C</td>
        <td>Foundational language for systems programming.</td>
        <td><code>printf("Hello, World!\n");</code></td>
      </tr>
      <tr>
        <td>Programming Languages</td>
        <td>C++</td>
        <td>High-performance programming for games and software.</td>
        <td><code>std::cout &lt;&lt; "Hello, World!" &lt;&lt; std::endl;</code></td>
      </tr>
      <tr>
        <td>Programming Languages</td>
        <td>C#</td>
        <td>Microsoft’s language for apps and enterprise solutions.</td>
        <td><code>Console.WriteLine("Hello, World!");</code></td>
      </tr>
      <tr>
        <td>Programming Languages</td>
        <td>Java</td>
        <td>Widely used for enterprise apps and Android.</td>
        <td><code>System.out.println("Hello, World!");</code></td>
      </tr>
      <tr>
        <td>Programming Languages</td>
        <td>PHP</td>
        <td>Server-side scripting for dynamic websites.</td>
        <td><code>&lt;?php echo "Hello, World!"; ?&gt;</code></td>
      </tr>
      <tr>
        <td>Programming Languages</td>
        <td>Go</td>
        <td>Fast, compiled language for modern apps.</td>
        <td><code>fmt.Println("Hello, World!")</code></td>
      </tr>
      <tr>
        <td>Programming Languages</td>
        <td>Kotlin</td>
        <td>Modern language compatible with Java.</td>
        <td><code>println("Hello, World!")</code></td>
      </tr>
      <tr>
        <td>Programming Languages</td>
        <td>Rust</td>
        <td>High-performance systems language.</td>
        <td><code>println!("Hello, World!");</code></td>
      </tr>
      <tr>
        <td>Programming Languages</td>
        <td>R</td>
        <td>Language for statistics and data visualization.</td>
        <td><code>print("Hello, World!")</code></td>
      </tr>
      <tr>
        <td>Programming Languages</td>
        <td>Bash</td>
        <td>Scripting language for Linux command automation.</td>
        <td><code>echo "Hello, World!"</code></td>
      </tr>

      <!-- Databases -->
      <tr>
        <td>Databases</td>
        <td>SQL</td>
        <td>Language for managing and querying databases.</td>
        <td><code>SELECT * FROM users;</code></td>
      </tr>
      <tr>
        <td>Databases</td>
        <td>MySQL</td>
        <td>Popular open-source relational database.</td>
        <td><code>CREATE DATABASE school;</code></td>
      </tr>
      <tr>
        <td>Databases</td>
        <td>PostgreSQL</td>
        <td>Advanced open-source database supporting SQL & JSON.</td>
        <td><code>SELECT name-&gt;&gt;'first' FROM students;</code></td>
      </tr>
      <tr>
        <td>Databases</td>
        <td>MongoDB</td>
        <td>NoSQL database storing JSON-like documents.</td>
        <td><code>db.students.insertOne({ name: "John" });</code></td>
      </tr>

      <!-- Backend & Server-Side -->
      <tr>
        <td>Backend & Server-Side</td>
        <td>Node.js</td>
        <td>Runs JavaScript on the server.</td>
        <td><code>console.log("Server running...");</code></td>
      </tr>
      <tr>
        <td>Backend & Server-Side</td>
        <td>Django</td>
        <td>Python backend framework for web apps.</td>
        <td><code>urlpatterns = [path('', views.home)]</code></td>
      </tr>
      <tr>
        <td>Backend & Server-Side</td>
        <td>ASP (Active Server Pages)</td>
        <td>Microsoft’s framework for dynamic sites.</td>
        <td><code>&lt;% Response.Write("Hello, World!") %&gt;</code></td>
      </tr>

      <!-- Data Science & AI -->
      <tr>
        <td>Data Science & AI</td>
        <td>NumPy</td>
        <td>Python library for numerical computing.</td>
        <td><code>import numpy as np; np.array([1,2,3])</code></td>
      </tr>
      <tr>
        <td>Data Science & AI</td>
        <td>Pandas</td>
        <td>Python library for working with datasets.</td>
        <td><code>import pandas as pd; pd.DataFrame({"Name":["John"]})</code></td>
      </tr>
      <tr>
        <td>Data Science & AI</td>
        <td>SciPy</td>
        <td>Scientific computing library built on NumPy.</td>
        <td><code>from scipy import stats</code></td>
      </tr>
      <tr>
        <td>Data Science & AI</td>
        <td>Machine Learning</td>
        <td>AI that learns from data.</td>
        <td><code>model.fit(X_train, y_train)</code></td>
      </tr>
      <tr>
        <td>Data Science & AI</td>
        <td>Data Science</td>
        <td>Using statistics, analysis, and ML for insights.</td>
        <td><code>import seaborn as sns; sns.pairplot(data)</code></td>
      </tr>
      <tr>
        <td>Data Science & AI</td>
        <td>Generative AI</td>
        <td>AI that creates text, images, or code.</td>
        <td><code>ai.generate("Write a poem about the ocean")</code></td>
      </tr>

      <!-- Development Tools -->
      <tr>
        <td>Development Tools</td>
        <td>Git</td>
        <td>Version control for tracking code changes.</td>
        <td><code>git commit -m "Initial commit"</code></td>
      </tr>
      <tr>
        <td>Development Tools</td>
        <td>GitHub/GitLab/Bitbucket</td>
        <td>Remote code repositories.</td>
        <td><code>git push origin main</code></td>
      </tr>
      <tr>
        <td>Development Tools</td>
        <td>Excel</td>
        <td>Spreadsheet program for organizing data.</td>
        <td><code>=SUM(A1:A10)</code></td>
      </tr>
      <tr>
        <td>Development Tools</td>
        <td>XML</td>
        <td>Markup language for storing data.</td>
        <td><code>&lt;user&gt;&lt;name&gt;John&lt;/name&gt;&lt;/user&gt;</code></td>
      </tr>
      <tr>
        <td>Development Tools</td>
        <td>DSA (Data Structures & Algorithms)</td>
        <td>Core CS concepts for problem-solving.</td>
        <td><code>stack = [1, 2, 3]  # Push and pop elements</code></td>
      </tr>
    </tbody>
  </table>
</section>

<style>
  .skills-table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 1em;
    background: var(--bg, #fff);
    color: var(--text, #000);
  }
  .skills-table th, .skills-table td {
    border: 1px solid var(--border, #ccc);
    padding: 8px;
    text-align: left;
    vertical-align: top;
  }
  .skills-table th {
    background: var(--accent, #333);
    color: white;
  }
  .skills-table code {
    background: rgba(0,0,0,0.05);
    padding: 2px 4px;
    border-radius: 4px;
    font-family: monospace;
  }
  @media (max-width: 768px) {
    .skills-table th, .skills-table td {
      font-size: 0.9em;
      padding: 6px;
    }
  }
</style>
This is fully dark/light theme compatible since it uses your CSS variables (--bg, --text, --border, --accent).
On small screens, it scales down slightly for better readability.

If you want, I can make it searchable so students can instantly filter by name or category right in the browser without reloading the page. That would make this list way more interactive.

Do you want me to add the search + filter function?