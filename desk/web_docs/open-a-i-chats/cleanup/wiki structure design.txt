Skip to content
Chat history

You said:
make a wiki for maloneuniversity.org
ChatGPT said:
Got it — I can design a wiki structure for maloneuniversity.org so it’s consistent, easy to expand, and matches your existing school website style.

Here’s the plan:

1. Purpose
Your wiki will be the knowledge base for the Pan-African free online school — documenting courses, skills, resources, policies, and internal/external references.

It will:

Organize all content in categories

Provide search & navigation tools

Be fully static HTML/CSS/JS so it runs on Netlify/GitHub Pages without a backend

2. Recommended Folder Structure
/wiki
   index.html           ← Wiki home page
   /assets
       style.css        ← Wiki-specific styles
       wiki.js          ← JS for search, filters
   /categories
       index.html       ← Categories listing
       /political-science
           index.html
           african-history.html
           governance.html
       /law
           index.html
           constitutions.html
       /math
           index.html
           algebra.html
           geometry.html
       /science
           index.html
           physics.html
           biology.html
       /it
           index.html
           html.html
           networking.html
3. Wiki Navigation
Header
Logo / Name

Search bar

Category dropdown

Sidebar
Expandable categories

Quick links: "About Wiki", "Recent Updates", "Help"

Footer
License (CC BY-SA for open educational content)

Contact link

4. Index Page (/wiki/index.html)
Example minimal HTML layout using your current site’s style:

<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>Malone University Wiki</title>
<link rel="stylesheet" href="../assets/style.css">
<script src="../assets/wiki.js" defer></script>
</head>
<body>

<header>
  <h1>Malone University Wiki</h1>
  <input type="text" id="searchBox" placeholder="Search the wiki...">
</header>

<main>
  <section>
    <h2>Categories</h2>
    <ul>
      <li><a href="categories/political-science/index.html">Political Science</a></li>
      <li><a href="categories/law/index.html">Law</a></li>
      <li><a href="categories/math/index.html">Mathematics</a></li>
      <li><a href="categories/science/index.html">Science</a></li>
      <li><a href="categories/it/index.html">Information Technology</a></li>
    </ul>
  </section>

  <section>
    <h2>Recent Updates</h2>
    <ul id="recentUpdates"></ul>
  </section>
</main>

<footer>
  <p>© 2025 Malone University. Content available under CC BY-SA.</p>
</footer>

</body>
</html>
5. Wiki Search (wiki.js)
document.getElementById('searchBox').addEventListener('input', function() {
  const query = this.value.toLowerCase();
  document.querySelectorAll('main ul li a').forEach(link => {
    link.parentElement.style.display =
      link.textContent.toLowerCase().includes(query) ? '' : 'none';
  });
});
6. Page Template for Articles
<article>
  <h1>Article Title</h1>
  <p><em>Last updated: 2025-08-13</em></p>
  <p>Introductory paragraph...</p>

  <h2>Section Heading</h2>
  <p>Details go here.</p>

  <h2>References</h2>
  <ul>
    <li><a href="https://example.com">Source 1</a></li>
  </ul>
</article>
7. Growth Plan
Phase 1: Build static category & article pages

Phase 2: Add client-side search & "recent changes" JS

Phase 3: Auto-generate pages from Markdown (like your Black Papers registry)

Phase 4: Link wiki directly into course modules and skill registry

If you want, I can go ahead and write the complete wiki/index.html and starter pages so you can drop them into maloneuniversity.org right now without any extra setup.

You said:
where do I put wiki.js code? How do I wire it in?
ChatGPT said:
You’ll want to put your wiki.js file in a dedicated assets folder (or whatever directory you’re already using for scripts) and then link it in your HTML so the browser loads it.

Here’s the step-by-step:

1. File Location
If your wiki is here:

/wiki
   index.html
   /assets
       style.css
       wiki.js
then wiki.js will live in:

/wiki/assets/wiki.js
2. Linking the Script
In your HTML file (e.g., /wiki/index.html), put this right before the </body> tag or in the <head> with defer:

<script src="assets/wiki.js" defer></script>
src="assets/wiki.js" → path from the HTML file to your JS file

defer → waits until HTML is loaded before running the script, so it can find the search box

3. Folder Depth Adjustments
If you’re in a subpage (like /wiki/categories/law/index.html), you’ll need to adjust the path to go up one level:

<script src="../../assets/wiki.js" defer></script>
4. Double-Check
Open your wiki page in the browser

Press F12 → Console → Reload page

If there’s no "404 Not Found" error for wiki.js, it’s wired correctly

Try typing in the search box to test if filtering works

If you want, I can give you a ready-to-drop wiki/index.html and wiki.js set that already has the correct wiring and structure so you can test it immediately. That way you don’t have to guess the paths.

You said:
thank you that is all
ChatGPT said:
Got it — glad I could help!
Sounds like your wiki is about to have its first heartbeat. 🚀

You said:
can you write minimal code to fetch navbar?
ChatGPT said:
Yep — if you just want minimal JS to load a navbar from an external HTML file into your wiki pages, you can do it in just a few lines.

1. Create a file navbar.html (in /assets or wherever you want):

<nav>
  <a href="/">Home</a>
  <a href="/wiki/">Wiki</a>
  <a href="/courses/">Courses</a>
  <a href="/about/">About</a>
</nav>
2. In your HTML page, add an empty container where the navbar should appear:

<div id="navbar"></div>
3. Minimal JS to fetch and insert it (navbar.js):

fetch('/assets/navbar.html')
  .then(r => r.text())
  .then(html => document.getElementById('navbar').innerHTML = html);
4. Link the script in your HTML:

<script src="/assets/navbar.js" defer></script>
This will:

Load /assets/navbar.html

Insert its contents into the <div id="navbar">

Work on all pages without duplicating navbar code

If you want, I can make it path-safe so it works in /wiki/ subfolders without breaking. That’s usually the tricky part when your site is static. Would you like me to do that?

You said:
I think I am okay, my navbar use absolute links like /static/contact
ChatGPT said:
Perfect — if your navbar links are absolute like /static/contact, then you don’t even need to worry about relative path headaches.

In that case, your minimal fetch will work exactly as written:

fetch('/assets/navbar.html')
  .then(r => r.text())
  .then(html => document.getElementById('navbar').innerHTML = html);
Since the paths start with /, the browser will always resolve them from the site root, no matter where the page lives — /wiki/, /courses/, etc.

Sounds like you’ve got it set up in the simplest, least-breakable way.

You said:
If I already have <script src="assets/wiki.js" defer></script> just before </body> 
then  where do I put <script src="/assets/navbar.js" defer></script> ?
ChatGPT said:
If you already have:

<script src="assets/wiki.js" defer></script>
right before </body>, you can stack your new script tag immediately after it, like this:

<script src="assets/wiki.js" defer></script>
<script src="/assets/navbar.js" defer></script>
</body>
A few notes:

Order matters only if one script depends on another. In your case, wiki.js and navbar.js are independent, so the order doesn’t matter.

Using defer means both will wait until the HTML is parsed before running, so you’re safe putting them together at the bottom.

/assets/navbar.js is absolute path (from site root), while assets/wiki.js is relative path (from current folder). That’s fine — just make sure you want that behavior.

If you ever move wiki.js to the root-level /assets folder for consistency, you’d change it to:

<script src="/assets/wiki.js" defer></script>
<script src="/assets/navbar.js" defer></script>
Do you want me to give you a combined single script that does both the wiki search and navbar fetch, so you only load one file? That can speed up your page a little.

You said:
why doe navbar script go under the wiki script?
ChatGPT said:
It doesn’t have to go under the wiki script — they can be in either order as long as:

They don’t depend on each other (yours don’t).

They’re both marked with defer (so they run after the DOM is parsed).

The only reason I suggested putting the navbar script after wiki.js was just for neatness — keep your “page logic” (wiki.js) first and your “layout load” (navbar.js) second.

But if you wanted to:

<script src="/assets/navbar.js" defer></script>
<script src="assets/wiki.js" defer></script>
…it would work the same.

Rule of thumb:

If scripts need another script to run first → put that one higher.

If they’re independent → order doesn’t matter.

If you want, I can show you how to merge navbar loading into wiki.js so you only have one <script> tag to manage. That way you’d never worry about order at all.

You said:
okay
ChatGPT said:
Alright — here’s how to merge the navbar loader into your existing wiki.js so you only need one script tag.

Updated wiki.js
// ====== WIKI SEARCH ======
document.addEventListener('DOMContentLoaded', () => {
  const searchBox = document.getElementById('searchBox');
  if (searchBox) {
    searchBox.addEventListener('input', function () {
      const query = this.value.toLowerCase();
      document.querySelectorAll('main ul li a').forEach(link => {
        link.parentElement.style.display =
          link.textContent.toLowerCase().includes(query) ? '' : 'none';
      });
    });
  }

  // ====== NAVBAR FETCH ======
  const navbarContainer = document.getElementById('navbar');
  if (navbarContainer) {
    fetch('/assets/navbar.html')
      .then(r => r.text())
      .then(html => navbarContainer.innerHTML = html)
      .catch(err => console.error('Navbar failed to load:', err));
  }
});
HTML Structure
<div id="navbar"></div>

<!-- Somewhere in main content -->
<input type="text" id="searchBox" placeholder="Search the wiki...">

<script src="assets/wiki.js" defer></script>
</body>
✅ Now you have:

One script file (wiki.js)

Handles both search filtering and navbar fetching

Works in any page as long as you have <div id="navbar"> and/or <input id="searchBox"> present.

Do you want me to also make the navbar highlight the current page link automatically? That’s a nice extra for a wiki.

You said:
yes
ChatGPT said:
Got it — here’s your merged wiki.js with automatic “highlight current page” for the navbar.

wiki.js
document.addEventListener('DOMContentLoaded', () => {
  // ====== WIKI SEARCH ======
  const searchBox = document.getElementById('searchBox');
  if (searchBox) {
    searchBox.addEventListener('input', function () {
      const query = this.value.toLowerCase();
      document.querySelectorAll('main ul li a').forEach(link => {
        link.parentElement.style.display =
          link.textContent.toLowerCase().includes(query) ? '' : 'none';
      });
    });
  }

  // ====== NAVBAR FETCH & HIGHLIGHT ======
  const navbarContainer = document.getElementById('navbar');
  if (navbarContainer) {
    fetch('/assets/navbar.html')
      .then(r => r.text())
      .then(html => {
        navbarContainer.innerHTML = html;

        // Highlight current page
        const currentPath = window.location.pathname;
        navbarContainer.querySelectorAll('a').forEach(link => {
          if (link.getAttribute('href') === currentPath) {
            link.classList.add('active');
          }
        });
      })
      .catch(err => console.error('Navbar failed to load:', err));
  }
});
CSS for Highlight
Add this to your main style.css:

nav a.active {
  font-weight: bold;
  color: #ff6600; /* or your theme accent color */
  border-bottom: 2px solid #ff6600;
}
How It Works
Loads /assets/navbar.html into <div id="navbar">.

Compares each <a href="..."> in the navbar to the current page path (window.location.pathname).

Adds the active class to the matching link.

CSS styles the active link so it’s visibly highlighted.

Do you want me to make it smart enough to highlight parent links for subpages (e.g., /wiki/ gets “Wiki” active even if you’re on /wiki/math/algebra.html)? That’s the next logical step.

You said:
yes
ChatGPT said:
Alright — here’s the smart version of wiki.js that highlights both exact matches and parent links for subpages.

wiki.js
document.addEventListener('DOMContentLoaded', () => {
  // ====== WIKI SEARCH ======
  const searchBox = document.getElementById('searchBox');
  if (searchBox) {
    searchBox.addEventListener('input', function () {
      const query = this.value.toLowerCase();
      document.querySelectorAll('main ul li a').forEach(link => {
        link.parentElement.style.display =
          link.textContent.toLowerCase().includes(query) ? '' : 'none';
      });
    });
  }

  // ====== NAVBAR FETCH & SMART HIGHLIGHT ======
  const navbarContainer = document.getElementById('navbar');
  if (navbarContainer) {
    fetch('/assets/navbar.html')
      .then(r => r.text())
      .then(html => {
        navbarContainer.innerHTML = html;

        const currentPath = window.location.pathname;

        navbarContainer.querySelectorAll('a').forEach(link => {
          const linkPath = link.getAttribute('href');

          // Highlight exact match
          if (linkPath === currentPath) {
            link.classList.add('active');
          }

          // Highlight if current page is in this section
          else if (
            linkPath !== '/' && // skip root
            currentPath.startsWith(linkPath)
          ) {
            link.classList.add('active');
          }
        });
      })
      .catch(err => console.error('Navbar failed to load:', err));
  }
});
CSS for Highlight
nav a.active {
  font-weight: bold;
  color: #ff6600;
  border-bottom: 2px solid #ff6600;
}
Example Behavior
/wiki/ → highlights Wiki link.

/wiki/math/ → still highlights Wiki link.

/wiki/math/algebra.html → still highlights Wiki link (or Math link if you have it in the navbar).

I can also make it so only the deepest matching link is highlighted — so if you’re on /wiki/math/algebra.html, it highlights Math instead of Wiki. That’s slightly more complex, but it’s cleaner for large menus.

Do you want me to make it deepest-match wins? That’s the way big wikis like MDN do it.

You said:
okay now I am confused. How does the search feature work exactly? It search entire folder for matching terms? How smart is it?
ChatGPT said:
Right now, your wiki search in wiki.js is not a “full-site search” — it’s a very simple, page-local filter.

How it works right now
It looks for the search box with id="searchBox".

Every time you type, it:

Gets the text you typed (query).

Loops over all <a> links inside <main> ul li.

Hides the ones that don’t contain your text.

That means it only filters what’s already in the HTML of the current page — e.g., the list of categories or articles.

It does not:

Search other HTML files.

Search the contents of articles.

Search across the entire /wiki/ folder.

How smart is it?
Right now: dumb but fast — only matches visible link text on the current page.

No fuzzy matching, no ranking, no partial word stems.

Case-insensitive (because we .toLowerCase() everything).

To make it site-wide
If you want it to search the entire wiki folder, you’d need:

A search index (list of all pages and maybe some keywords).

JS that loads this index (JSON file) and filters it.

Optional: fuzzy search library like Fuse.js for better matching.

If you want, I can give you a no-backend, full-folder search setup that:

Automatically builds a JSON list of all wiki articles (you can update it when adding new pages).

Searches across that list in real time.

Works entirely in the browser, so it still fits your static hosting setup.

Do you want me to upgrade your search from “filters current page list” to “searches the entire wiki”?

You said:
does netlify offer one?
ChatGPT said:
Netlify itself doesn’t ship a built-in search engine for static sites — but they integrate really well with services that do provide it.

Here’s the breakdown:

1. What Netlify does
Hosts your static files (HTML, CSS, JS, JSON).

Doesn’t run a database or a server-side search.

So there’s no “search API” you can just turn on.

2. Options people use with Netlify
Option	How it Works	Cost
Client-side search (DIY)	You generate a JSON index of pages, load it with JavaScript, and filter it in the browser (Fuse.js, Lunr.js, etc.)	Free
Algolia DocSearch	Hosted search engine for static docs; free for open-source & educational sites	Free for OSS
Pagefind	Static search index generator you run at build time; results are served entirely client-side	Free
Search.io, Meilisearch, Typesense	External search APIs you host or subscribe to	Paid / Self-host
3. What I recommend for you
Since you’re:

Building an educational site

Hosting on Netlify

Not running a backend

You probably want either:

Pagefind — install it locally, it crawls your site at build time, produces a search index + JS, and you just drop it into your site.

Algolia DocSearch — if you qualify as educational/open, they’ll host the index and give you a search bar that’s instant and powerful.

If you like, I can walk you through setting up Pagefind so your wiki has full-site search without any external server, and it’ll run 100% on Netlify. That way, your search will be way smarter than the little “filter links” you have now.

Do you want me to prep that Pagefind setup for you?

You said:
not right now. I need to take baby steps before I break everything.
ChatGPT said:
That’s a good call — better to keep it simple until you’re fully comfortable with the pieces you already have.

Right now your search is safe and self-contained, so it can’t “break everything.” When you’re ready, upgrading to full-site search will just mean adding one extra file and swapping the search code — no need to tear the wiki apart.

We can keep it in “baby mode” until you feel like leveling it up.

You said:
My main use is giving quick dirty tutorials and using highlighted links to introduce jargon. I quickly move on without explain but rather by showing by doing, such as building a website. Words like web hosting are links that direct to wiki page with a full encyclopedia-style explanation for people who want deeper learning.
ChatGPT said:
Gotcha — so your wiki is basically the deep reference library that supports your fast-paced, example-first lessons.

That means your current setup is actually ideal for now:

Lesson page: short, action-driven, with inline jargon links like <a href="/wiki/web-hosting.html">web hosting</a>

Wiki page: full, slow, encyclopedia-style deep dive on the term

This way:

People who are ready to keep moving don’t get bogged down

People who are curious can follow the link and get the background before coming back

You can grow the wiki gradually, just adding terms as they come up in lessons

Why your current baby-step search is fine for now
Since your lessons directly link to specific wiki entries, you’re not relying on the search bar as the main navigation method yet — it’s just a helper for browsing inside the wiki index.
Later, when the wiki gets hundreds of entries, that’s when we can plug in full-site search.

If you want, I can give you a lightweight wiki entry template that:

Fits your site’s style

Has a clear “Back to lesson” link

Auto-highlights the term being defined
That way, every new jargon link feels consistent and polished.

Do you want me to make that template for you?

You said:
yes
ChatGPT said:
Alright — here’s a lightweight, reusable wiki entry template for maloneuniversity.org that will keep your jargon explanations consistent and quick to make.

1. HTML Template
Save as something like /wiki/web-hosting.html

<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>Web Hosting - Malone University Wiki</title>
<link rel="stylesheet" href="/assets/style.css">
<script src="/assets/wiki.js" defer></script>
</head>
<body>

<div id="navbar"></div>

<main>
  <article class="wiki-entry">
    <header>
      <h1>Web Hosting</h1>
      <p class="definition">Web hosting is the service of storing and delivering website files so they are accessible on the internet.</p>
    </header>

    <section>
      <h2>Overview</h2>
      <p>In web development, hosting is what makes your website available for others to see. 
         It involves storing your HTML, CSS, JavaScript, and other assets on a server with an internet connection.</p>
    </section>

    <section>
      <h2>Types of Web Hosting</h2>
      <ul>
        <li><strong>Shared hosting</strong> – multiple sites on the same server</li>
        <li><strong>VPS</strong> – virtual private server with more control</li>
        <li><strong>Dedicated</strong> – full physical server for one site</li>
        <li><strong>Static hosting</strong> – optimized for HTML/CSS/JS only</li>
      </ul>
    </section>

    <section>
      <h2>Related Terms</h2>
      <p>
        <a href="/wiki/domain-name.html">Domain name</a>,
        <a href="/wiki/dns.html">DNS</a>,
        <a href="/wiki/server.html">Server</a>
      </p>
    </section>

    <footer class="wiki-footer">
      <p><a href="javascript:history.back()">← Back to lesson</a></p>
      <p>Last updated: 2025-08-13</p>
    </footer>
  </article>
</main>

</body>
</html>
2. CSS Additions
Put these in your /assets/style.css so all wiki entries match:

.wiki-entry {
  max-width: 800px;
  margin: auto;
  padding: 1rem;
}

.wiki-entry header h1 {
  font-size: 2rem;
  margin-bottom: 0.2rem;
}

.wiki-entry .definition {
  font-style: italic;
  color: #666;
  margin-bottom: 1rem;
}

.wiki-entry section {
  margin-bottom: 1.5rem;
}

.wiki-entry ul {
  margin-left: 1.5rem;
  list-style: disc;
}

.wiki-footer {
  font-size: 0.9rem;
  color: #777;
  border-top: 1px solid #ccc;
  padding-top: 1rem;
}
3. How it Fits Your Workflow
In lessons:

You’ll need to choose a <a href="/wiki/web-hosting.html">web hosting</a> service.
In wiki:
The entry gives the in-depth explanation and has a “Back to lesson” link so users can return without losing context.

4. Scaling Up
You can copy this file for each new term:

Change <title> and <h1>

Change .definition and section content

Update the “Related Terms” links

If you want, I can also give you a tiny JS snippet so the “Last updated” date auto-fills from the file’s metadata, meaning you never have to manually change it again. That would keep your wiki feeling fresh without extra effort.

Do you want me to add that?

You said:
can I use links like this to target section s of a wiki page <a href="mgu_reference_wiki/information_technology/#web-hosting">Web hosting</a> 
ChatGPT said:
Yes — that will work, but you need to set it up correctly so the #web-hosting part actually finds a target on the wiki page.

How anchors work in HTML
When you use a link like:

<a href="mgu_reference_wiki/information_technology/#web-hosting">Web hosting</a>
the browser will:

Load mgu_reference_wiki/information_technology/index.html (or .html file you specify)

Jump to the element on that page with id="web-hosting"

Targeting a section
In your wiki page, mark the section with that ID:

<h2 id="web-hosting">Web Hosting</h2>
<p>Explanation goes here...</p>
It doesn’t have to be an <h2> — any HTML element with id="web-hosting" works.

Things to watch out for
Spaces in IDs → not allowed. Use hyphens or underscores (web-hosting is good).

Case sensitivity → technically IDs are case-sensitive in HTML5. Pick one style and be consistent.

Relative vs Absolute paths →

mgu_reference_wiki/information_technology/#web-hosting → relative to current page location

/mgu_reference_wiki/information_technology/#web-hosting → absolute from site root (safer if you’re linking from many different folders).

Bonus
If you want it to scroll smoothly instead of jumping instantly, add this to your CSS:

html {
  scroll-behavior: smooth;
}
If you want, I can give you a wiki page structure that automatically generates section IDs from headings, so you don’t have to manually add id="..." every time. That’s how big wikis like MDN and Wikipedia make every heading linkable without extra work.

Do you want me to make that auto-ID system for you?

You said:
yes
ChatGPT said:
Alright — here’s a lightweight auto-ID system for your wiki so every heading (<h1>–<h6>) automatically gets a clean id and is linkable without you manually adding anything.

1. Add this to wiki.js
This runs after the page loads and assigns IDs to headings that don’t already have one.

document.addEventListener('DOMContentLoaded', () => {
  // Auto-generate IDs for headings
  document.querySelectorAll('h1, h2, h3, h4, h5, h6').forEach(heading => {
    if (!heading.id) {
      // Make a slug from heading text
      let slug = heading.textContent
        .toLowerCase()
        .replace(/[^\w\s-]/g, '') // remove punctuation
        .trim()
        .replace(/\s+/g, '-'); // spaces → hyphens

      heading.id = slug;
    }
  });
});
2. How it works
Finds every heading on the page.

Skips ones that already have an id.

Turns the text into a lowercase, hyphen-separated “slug”.

Assigns that slug as the heading’s id.

3. Linking to a section
Now you can do:

<a href="/mgu_reference_wiki/information_technology/#web-hosting">Web hosting</a>
…and it will scroll to:

<h2>Web Hosting</h2>
without you ever adding id="web-hosting" manually — the JS will create it.

4. Optional: clickable heading anchors
If you want headings to be clickable like Wikipedia or MDN, add this to the same script after setting the IDs:

document.querySelectorAll('h1, h2, h3, h4, h5, h6').forEach(heading => {
  if (heading.id) {
    let anchor = document.createElement('a');
    anchor.href = '#' + heading.id;
    anchor.textContent = ' 🔗';
    anchor.style.textDecoration = 'none';
    anchor.style.marginLeft = '0.3em';
    heading.appendChild(anchor);
  }
});
That will put a small link icon next to each heading so visitors can copy/share the section link.

If you want, I can merge this into your existing wiki.js so it runs alongside the search, navbar, and highlighting — keeping it all in one neat file. That way, your wiki script stays a single drop-in include.

Do you want me to merge it?

You said:
Normally I uss something link classes I think to create jump links.
ChatGPT said:
Right — you can use class attributes for styling or identifying elements, but for jump links specifically, browsers need an id, not just a class.

Why id is needed for jump links
When you link to #something, the browser searches the page for an element with id="something".

It completely ignores class="something" for scrolling/jumping.

Common pattern you might be thinking of
Some devs do this:

<h2 class="jump-link">Web Hosting</h2>
…and then they run JavaScript at load time to turn the class into an ID:

document.querySelectorAll('.jump-link').forEach(el => {
  el.id = el.textContent.trim().toLowerCase().replace(/\s+/g, '-');
});
This way:

You mark any heading you want as a jump link using a class.

JS generates the matching id for you automatically.

When to use which
Direct id in HTML → Best if you know the exact target name when writing content.

Class + JS-generated id → Best if you want to quickly tag multiple elements without worrying about typing consistent IDs manually.

If you want, I can tweak your auto-ID script so it only runs on headings with a certain class (like .jump-link) instead of all headings.
That way you have fine control over which headings are linkable.

Do you want me to adjust it to work that way?