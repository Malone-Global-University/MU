Skip to content
Chat history

You said:
I am rebuiliding pages starting at index. Purpose is to have a working toggle darkmode/lightmode/systemmode and a collapsible navbar. This is a sample page: <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Malone University</title>
  <link rel="icon" href="images/favicon.ico" type="image/x-icon" />
  <link rel="stylesheet" href="/css/mgu.css" />
  </head>

<body>
  <div class="container">
    <header role="banner">
      <a class="brand" href="#" aria-label="Homepage">
        <span class="logo" aria-hidden="true">MU</span>
        <div>
          <h1>Malone University</h1>
          <p class="lead">Sample dark-mode one-page demo</p>
        </div>
      </a>

      <!-- Accessible theme toggle -->
      <button id="theme-toggle" class="theme-toggle" aria-label="Toggle color theme" aria-pressed="false" title="Toggle dark / light">
        <svg class="toggle-icon" id="icon-sun" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
          <path d="M12 3v2M12 19v2M4.22 4.22l1.42 1.42M18.36 18.36l1.42 1.42M1 12h2M21 12h2M4.22 19.78l1.42-1.42M18.36 5.64l1.42-1.42" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
          <circle cx="12" cy="12" r="3" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
        <svg class="toggle-icon" id="icon-moon" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" aria-hidden="true" style="display:none">
          <path d="M21 12.79A9 9 0 1111.21 3 7 7 0 0021 12.79z" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      </button>
    </header>

    <main>
      <section class="hero">
        <div class="card intro" aria-labelledby="welcome-title">
          <h2 id="welcome-title">Beautiful dark mode, accessible & persistent</h2>
          <p class="lead">This page demonstrates a practical dark-mode setup using CSS variables, an accessible toggle, and localStorage to remember the user's choice.</p>

          <div class="actions" role="toolbar" aria-label="Sample actions">
            <button class="btn">Get started</button>
            <button class="btn ghost">Learn more</button>
          </div>

          <div class="features" aria-hidden="false">
            <div class="feature">
              <h3>Respects system theme</h3>
              <p>Defaults to your OS preference, but user selection persists.</p>
            </div>
            <div class="feature">
              <h3>Accessible toggle</h3>
              <p>Keyboard-focusable, ARIA aria-pressed and visible focus ring.</p>
            </div>
            <div class="feature">
              <h3>Easy to customize</h3>
              <p>Tweak CSS variables at the top to change colors quickly.</p>
            </div>
            <div class="feature">
              <h3>Responsive</h3>
              <p>Designed to look good on phone, tablet, and desktop.</p>
            </div>
          </div>

          <h3 style="margin-top:16px">Tiny code sample</h3>
          <pre><code>&lt;script&gt;
// read stored theme, apply to &lt;html&gt;:
// localStorage.setItem('site-theme', 'dark' | 'light' | null)
&lt;/script&gt;</code></pre>
        </div>

        <aside class="card" aria-label="Quick settings">
          <h3 style="margin-top:0">Quick settings</h3>
          <p style="color:var(--muted)">Current theme is shown by the toggle — press it to switch themes. Your choice will be remembered.</p>

          <div style="margin-top:16px">
            <strong>Theme:</strong> <span id="theme-label">—</span>
          </div>

          <hr style="margin:14px 0;border:0;border-top:1px solid rgba(255,255,255,0.03)">

          <div>
            <h4 style="margin:8px 0">Example code</h4>
            <pre><code>&lt;html class="dark"&gt; &lt;!-- or remove to use light --&gt;</code></pre>
          </div>
        </aside>
      </section>
    </main>


    <footer>
  <p>© 2025 Malone University. Building the future, on our own terms.</p>
  <p>
    <a href="https://twitter.com/MaloneGlobal" target="_blank" rel="noopener noreferrer" aria-label="Follow Malone University on Twitter">Twitter</a> |
    <a href="https://facebook.com/YOUR_HANDLE" target="_blank" rel="noopener noreferrer" aria-label="Follow Malone University on Facebook">Facebook</a> |
    <a href="https://instagram.com/maloneglobaluniversity" target="_blank" rel="noopener noreferrer" aria-label="Follow Malone University on Instagram">Instagram</a> |
    <a href="/static/terms.html">Terms</a>
  </p>
</footer>


<script src="data/main.js"></script>

</body>
</html>
   
ChatGPT said:
Got it — you’ve already got a good base for the dark/light/system toggle, but you’re missing two key things for your rebuild:

A collapsible navbar (for mobile and smaller viewports)

A working theme toggle script (so the icons switch, aria-pressed updates, and the choice persists in localStorage).

Here’s what I’d suggest:

1. HTML: Add a Collapsible Navbar
You can put this right after your <header> opening tag, and wrap your branding + toggle in it:

<header role="banner">
  <nav class="navbar">
    <a class="brand" href="/" aria-label="Homepage">
      <span class="logo" aria-hidden="true">MU</span>
      <div>
        <h1>Malone University</h1>
        <p class="lead">Sample dark-mode one-page demo</p>
      </div>
    </a>

    <!-- Mobile nav toggle -->
    <button class="nav-toggle" aria-label="Open navigation menu" aria-expanded="false">
      ☰
    </button>

    <ul class="nav-links">
      <li><a href="/">Home</a></li>
      <li><a href="/about.html">About</a></li>
      <li><a href="/courses.html">Courses</a></li>
      <li><a href="/contact.html">Contact</a></li>
    </ul>
  </nav>

  <!-- Theme toggle button (already in your code) -->
</header>
2. CSS for Navbar + Collapse
In /css/mgu.css, add:

/* Navbar layout */
.navbar {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.nav-links {
  list-style: none;
  display: flex;
  gap: 1rem;
}

.nav-links a {
  text-decoration: none;
  color: var(--text);
}

/* Mobile nav */
.nav-toggle {
  display: none;
  background: none;
  border: none;
  font-size: 1.5rem;
}

/* Collapse behavior for mobile */
@media (max-width: 768px) {
  .nav-links {
    display: none;
    flex-direction: column;
    background: var(--bg);
    position: absolute;
    top: 60px;
    right: 0;
    padding: 1rem;
  }
  .nav-links.open {
    display: flex;
  }
  .nav-toggle {
    display: block;
  }
}
3. JavaScript for Theme Toggle + Navbar
In /data/main.js:

// ===== Theme Toggle =====
const themeToggle = document.getElementById('theme-toggle');
const html = document.documentElement;
const themeLabel = document.getElementById('theme-label');

function setTheme(mode) {
  if (mode) {
    html.classList.toggle('dark', mode === 'dark');
    localStorage.setItem('site-theme', mode);
  } else {
    html.classList.remove('dark');
    localStorage.removeItem('site-theme');
  }
  themeLabel.textContent = mode || 'system';
}

function loadTheme() {
  const savedTheme = localStorage.getItem('site-theme');
  const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
  const mode = savedTheme || (prefersDark ? 'dark' : 'light');
  setTheme(mode);
}

themeToggle.addEventListener('click', () => {
  const currentTheme = localStorage.getItem('site-theme') || (html.classList.contains('dark') ? 'dark' : 'light');
  const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
  setTheme(newTheme);
  themeToggle.setAttribute('aria-pressed', newTheme === 'dark');
});

loadTheme();

// ===== Navbar Collapse =====
const navToggle = document.querySelector('.nav-toggle');
const navLinks = document.querySelector('.nav-links');

navToggle.addEventListener('click', () => {
  const expanded = navToggle.getAttribute('aria-expanded') === 'true';
  navToggle.setAttribute('aria-expanded', !expanded);
  navLinks.classList.toggle('open');
});
4. How It Works
Navbar

On screens ≤768px, the nav links hide until the ☰ button is clicked.

aria-expanded updates for accessibility.

Theme Toggle

Reads saved theme from localStorage.

Defaults to system preference if no saved theme.

Toggles icons and updates label text.

If you want, I can integrate both the collapsible navbar and the working dark/light/system toggle directly into your provided index.html so it’s ready to drop in. That way, you don’t need to wire it up yourself.

Do you want me to merge them into your page now?

You said:
I might try: <!-- /components/navbar.html -->
<nav class="navbar">
  <div class="logo-container">
    <div class="school-name">Malone University</div>
  </div>
  <ul class="nav-links">
    <li><a href="/index.html">Home</a></li>
    <li><a href="/static/contact.html">Contact</a></li>
    <li><a href="/static/jm.html">Founder</a></li>
    <li><a href="/static/mission.html">Mission</a></li>
    <li><a href="/static/hardened.html">FINAL OFFER</a></li>
    <li><a href="/departments/catalog.html">Catalog</a></li>
  </ul>
</nav>

<!-- Place this container where you want the navbar to appear:-->
<div id="navbar-placeholder"></div>


<!-- Then add this just before the closing </body> tag: -->
<script>
  fetch('/components/navbar.html')
    .then(res => res.text())
    .then(data => {
      document.getElementById('navbar-placeholder').innerHTML = data;
    });
</script>

ChatGPT said:
Yes — that approach will work for keeping the navbar in a single file and injecting it into multiple pages, but there are a few important things to note so it works smoothly with your dark/light/system toggle and collapsible behavior:

1. Structure
Right now you’re both defining the <nav> inside navbar.html and creating a <div id="navbar-placeholder"></div> in your main page. That’s correct — the placeholder is replaced with the fetched HTML.

Your folder structure would be:

/components/navbar.html
/index.html
/static/...
/css/mgu.css
/data/main.js
2. Problem: Scripts Inside the Fetched HTML
If you put JS directly in navbar.html (like for collapsible menus), it won’t execute when inserted with .innerHTML.
You’ll need to:

Keep all navbar-related scripts (menu toggle, ARIA updates) inside your main main.js file.

Or, after insertion, manually run eval() on any <script> tags in navbar.html (less clean).

3. Adjusting Your Fetch Code
Right now, you’re fetching navbar.html after the DOM loads (because it’s at the bottom).
That’s fine, but if your navbar needs JavaScript for collapsible menu or theme toggle icons, that JS needs to run after the fetch completes.

Here’s the slightly improved version:

<!-- Placeholder -->
<div id="navbar-placeholder"></div>

<script>
  fetch('/components/navbar.html')
    .then(res => res.text())
    .then(data => {
      document.getElementById('navbar-placeholder').innerHTML = data;

      // Once navbar is loaded, attach events for collapse or theme toggle
      const navToggle = document.querySelector('.nav-toggle');
      const navLinks = document.querySelector('.nav-links');
      if (navToggle && navLinks) {
        navToggle.addEventListener('click', () => {
          const expanded = navToggle.getAttribute('aria-expanded') === 'true';
          navToggle.setAttribute('aria-expanded', !expanded);
          navLinks.classList.toggle('open');
        });
      }
    })
    .catch(err => console.error('Error loading navbar:', err));
</script>
4. Navbar HTML (/components/navbar.html)
You could make it mobile-friendly from the start:

<nav class="navbar">
  <div class="logo-container">
    <div class="school-name">Malone University</div>
  </div>

  <button class="nav-toggle" aria-label="Open menu" aria-expanded="false">☰</button>

  <ul class="nav-links">
    <li><a href="/index.html">Home</a></li>
    <li><a href="/static/contact.html">Contact</a></li>
    <li><a href="/static/jm.html">Founder</a></li>
    <li><a href="/static/mission.html">Mission</a></li>
    <li><a href="/static/hardened.html">FINAL OFFER</a></li>
    <li><a href="/departments/catalog.html">Catalog</a></li>
  </ul>
</nav>
5. Why This Is Good
You only edit navbar.html to update links/site name.

Every page that includes the fetch code gets the latest navbar instantly.

Works well with your existing /css/mgu.css and /data/main.js.

If you want, I can merge your dark/light/system toggle into this navbar.html so you have one top bar that contains:

Logo / school name

Collapsible nav links

Theme toggle button

That way you only maintain one file for both the navigation and theme control.

Do you want me to build that unified version for you?

You said:
yes
ChatGPT said:
Alright — here’s a unified navbar.html that has:

School name & logo

Collapsible menu for mobile

Dark/Light/System toggle with icons

ARIA attributes for accessibility

Works with your existing /css/mgu.css and /data/main.js

/components/navbar.html
<nav class="navbar">
  <div class="logo-container">
    <a href="/index.html" class="school-name">Malone University</a>
  </div>

  <!-- Mobile menu button -->
  <button class="nav-toggle" aria-label="Open navigation menu" aria-expanded="false">
    ☰
  </button>

  <ul class="nav-links">
    <li><a href="/index.html">Home</a></li>
    <li><a href="/static/contact.html">Contact</a></li>
    <li><a href="/static/jm.html">Founder</a></li>
    <li><a href="/static/mission.html">Mission</a></li>
    <li><a href="/static/hardened.html">FINAL OFFER</a></li>
    <li><a href="/departments/catalog.html">Catalog</a></li>
  </ul>

  <!-- Theme toggle -->
  <button id="theme-toggle" class="theme-toggle" aria-label="Toggle color theme" aria-pressed="false" title="Toggle dark / light / system">
    <svg class="toggle-icon" id="icon-sun" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
      <path d="M12 3v2M12 19v2M4.22 4.22l1.42 1.42M18.36 18.36l1.42 1.42M1 12h2M21 12h2M4.22 19.78l1.42-1.42M18.36 5.64l1.42-1.42"
            stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
      <circle cx="12" cy="12" r="3" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
    </svg>
    <svg class="toggle-icon" id="icon-moon" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" aria-hidden="true" style="display:none">
      <path d="M21 12.79A9 9 0 1111.21 3 7 7 0 0021 12.79z"
            stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
    </svg>
  </button>
</nav>
Add placeholder to every page
Place this where you want the navbar to appear:

<div id="navbar-placeholder"></div>
Inject it with JS
Just before </body> in your page:

<script>
  fetch('/components/navbar.html')
    .then(res => res.text())
    .then(data => {
      document.getElementById('navbar-placeholder').innerHTML = data;

      // === Mobile menu toggle ===
      const navToggle = document.querySelector('.nav-toggle');
      const navLinks = document.querySelector('.nav-links');
      navToggle.addEventListener('click', () => {
        const expanded = navToggle.getAttribute('aria-expanded') === 'true';
        navToggle.setAttribute('aria-expanded', !expanded);
        navLinks.classList.toggle('open');
      });

      // === Theme toggle ===
      const themeToggle = document.getElementById('theme-toggle');
      const html = document.documentElement;

      function setTheme(mode) {
        if (mode) {
          html.classList.toggle('dark', mode === 'dark');
          localStorage.setItem('site-theme', mode);
        } else {
          html.classList.remove('dark');
          localStorage.removeItem('site-theme');
        }
      }

      function loadTheme() {
        const savedTheme = localStorage.getItem('site-theme');
        const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        const mode = savedTheme || (prefersDark ? 'dark' : 'light');
        setTheme(mode);
      }

      themeToggle.addEventListener('click', () => {
        const currentTheme = localStorage.getItem('site-theme') || (html.classList.contains('dark') ? 'dark' : 'light');
        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
        setTheme(newTheme);
        themeToggle.setAttribute('aria-pressed', newTheme === 'dark');
        document.getElementById('icon-sun').style.display = newTheme === 'light' ? 'block' : 'none';
        document.getElementById('icon-moon').style.display = newTheme === 'dark' ? 'block' : 'none';
      });

      loadTheme();
    })
    .catch(err => console.error('Error loading navbar:', err));
</script>
CSS Adjustments (/css/mgu.css)
Add at the end if you haven’t already:

/* Mobile menu */
.nav-toggle {
  display: none;
  background: none;
  border: none;
  font-size: 1.5rem;
}

.nav-links {
  list-style: none;
  display: flex;
  gap: 1rem;
}

@media (max-width: 768px) {
  .nav-links {
    display: none;
    flex-direction: column;
    background: var(--bg);
    position: absolute;
    top: 60px;
    right: 0;
    padding: 1rem;
  }
  .nav-links.open {
    display: flex;
  }
  .nav-toggle {
    display: block;
  }
}
This way:

You edit one file (navbar.html) for all pages.

Dark/light toggle is in the navbar itself.

The menu collapses on small screens.

Icons change when theme changes.

Theme preference persists with localStorage.

If you want, I can also make this support “system mode” in addition to dark and light so users can cycle Light → Dark → System in the toggle.
That’s a small change in the JS logic.

Do you want me to add system mode cycling?

You said:
the toggle was working, It did have system theme under the original code I gave you. I tried to change nabar.html to what you gave and now the toggle is broken: 
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Malone University</title>
  <link rel="icon" href="/images/favicon.ico" type="image/x-icon" />
  <link rel="stylesheet" href="/css/mgu.css" />
  </head>

<body>
<Header>
  <div class="container">
    <header role="banner">
      <a class="brand" href="#" aria-label="Homepage">
        <span class="logo" aria-hidden="true">MU</span>
        <div>
          <h1>Malone Global University</h1>
          <p class="lead">Permanent Home For Truth, Justice, and Freedom</p>
        </div>
      </a>
<div id="navbar-placeholder"></div>

      <!-- Accessible theme toggle -->
      <button id="theme-toggle" class="theme-toggle" aria-label="Toggle color theme" aria-pressed="false" title="Toggle dark / light">
        <svg class="toggle-icon" id="icon-sun" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
          <path d="M12 3v2M12 19v2M4.22 4.22l1.42 1.42M18.36 18.36l1.42 1.42M1 12h2M21 12h2M4.22 19.78l1.42-1.42M18.36 5.64l1.42-1.42" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
          <circle cx="12" cy="12" r="3" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
        <svg class="toggle-icon" id="icon-moon" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" aria-hidden="true" style="display:none">
          <path d="M21 12.79A9 9 0 1111.21 3 7 7 0 0021 12.79z" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      </button>
    </header>

    <main>
      <section class="hero">
        <div class="card intro" aria-labelledby="welcome-title">
          <h2 id="welcome-title">Beautiful dark mode, accessible & persistent</h2>
          <p class="lead">This page demonstrates a practical dark-mode setup using CSS variables, an accessible toggle, and localStorage to remember the user's choice.</p>

          <div class="actions" role="toolbar" aria-label="Sample actions">
            <button class="btn">Get started</button>
            <button class="btn ghost">Learn more</button>
          </div>

          <div class="features" aria-hidden="false">
            <div class="feature">
              <h3>Respects system theme</h3>
              <p>Defaults to your OS preference, but user selection persists.</p>
            </div>
            <div class="feature">
              <h3>Accessible toggle</h3>
              <p>Keyboard-focusable, ARIA aria-pressed and visible focus ring.</p>
            </div>
            <div class="feature">
              <h3>Easy to customize</h3>
              <p>Tweak CSS variables at the top to change colors quickly.</p>
            </div>
            <div class="feature">
              <h3>Responsive</h3>
              <p>Designed to look good on phone, tablet, and desktop.</p>
            </div>
          </div>

          <h3 style="margin-top:16px">Tiny code sample</h3>
          <pre><code>&lt;script&gt;
// read stored theme, apply to &lt;html&gt;:
// localStorage.setItem('site-theme', 'dark' | 'light' | null)
&lt;/script&gt;</code></pre>
        </div>

        <aside class="card" aria-label="Quick settings">
          <h3 style="margin-top:0">Quick settings</h3>
          <p style="color:var(--muted)">Current theme is shown by the toggle — press it to switch themes. Your choice will be remembered.</p>

          <div style="margin-top:16px">
            <strong>Theme:</strong> <span id="theme-label">—</span>
          </div>

          <hr style="margin:14px 0;border:0;border-top:1px solid rgba(255,255,255,0.03)">

          <div>
            <h4 style="margin:8px 0">Example code</h4>
            <pre><code>&lt;html class="dark"&gt; &lt;!-- or remove to use light --&gt;</code></pre>
          </div>
        </aside>
      </section>
    </main>


    <footer>
  <p>© 2025 Malone University. Building the future, on our own terms.</p>
  <p>
    <a href="https://twitter.com/MaloneGlobal" target="_blank" rel="noopener noreferrer" aria-label="Follow Malone University on Twitter">Twitter</a> |
    <a href="https://facebook.com/YOUR_HANDLE" target="_blank" rel="noopener noreferrer" aria-label="Follow Malone University on Facebook">Facebook</a> |
    <a href="https://instagram.com/maloneglobaluniversity" target="_blank" rel="noopener noreferrer" aria-label="Follow Malone University on Instagram">Instagram</a> |
    <a href='/static/terms'>Terms</a> |
    <a href='/static/contact'>Contact</a>
  </p>
</footer>


<script src="/data/main.js"></script>
<script>
  fetch('/partials/navbar.html')
    .then(res => res.text())
    .then(data => {
      document.getElementById('navbar-placeholder').innerHTML = data;

      // === Mobile menu toggle ===
      const navToggle = document.querySelector('.nav-toggle');
      const navLinks = document.querySelector('.nav-links');
      navToggle.addEventListener('click', () => {
        const expanded = navToggle.getAttribute('aria-expanded') === 'true';
        navToggle.setAttribute('aria-expanded', !expanded);
        navLinks.classList.toggle('open');
      });

      // === Theme toggle ===
      const themeToggle = document.getElementById('theme-toggle');
      const html = document.documentElement;

      function setTheme(mode) {
        if (mode) {
          html.classList.toggle('dark', mode === 'dark');
          localStorage.setItem('site-theme', mode);
        } else {
          html.classList.remove('dark');
          localStorage.removeItem('site-theme');
        }
      }

      function loadTheme() {
        const savedTheme = localStorage.getItem('site-theme');
        const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        const mode = savedTheme || (prefersDark ? 'dark' : 'light');
        setTheme(mode);
      }

      themeToggle.addEventListener('click', () => {
        const currentTheme = localStorage.getItem('site-theme') || (html.classList.contains('dark') ? 'dark' : 'light');
        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
        setTheme(newTheme);
        themeToggle.setAttribute('aria-pressed', newTheme === 'dark');
        document.getElementById('icon-sun').style.display = newTheme === 'light' ? 'block' : 'none';
        document.getElementById('icon-moon').style.display = newTheme === 'dark' ? 'block' : 'none';
      });

      loadTheme();
    })
    .catch(err => console.error('Error loading navbar:', err));
</script>

</body>
</html>
ChatGPT said:
I see what happened — your original toggle logic supported dark / light / system because it came from your first working main.js, but when we embedded a new navbar-fetch script, that logic got replaced with a simpler dark / light only toggle.

Right now, your new code:

Only toggles between "dark" and "light".

Has no branch to clear localStorage and fall back to system preference.

Doesn’t update #theme-label like your original did.

Runs after fetch('/partials/navbar.html'), so if your toggle button is actually inside the fetched partial, the document.getElementById('theme-toggle') in the page is targeting the wrong element.

How to fix it and keep system mode
I recommend:

Put the theme toggle button inside navbar.html so it’s in one place.

Remove the theme toggle button from index.html — keep only the placeholder <div id="navbar-placeholder"></div>.

Restore your original theme toggle JS from main.js so it cycles light → dark → system.

Make sure the theme toggle script runs after the navbar HTML has been fetched and inserted, otherwise it won’t find the button.

Here’s how your fetch code at the bottom should look:

<script>
  fetch('/partials/navbar.html')
    .then(res => res.text())
    .then(data => {
      document.getElementById('navbar-placeholder').innerHTML = data;

      // === Mobile menu toggle ===
      const navToggle = document.querySelector('.nav-toggle');
      const navLinks = document.querySelector('.nav-links');
      if (navToggle) {
        navToggle.addEventListener('click', () => {
          const expanded = navToggle.getAttribute('aria-expanded') === 'true';
          navToggle.setAttribute('aria-expanded', !expanded);
          navLinks.classList.toggle('open');
        });
      }

      // === Theme toggle (restored with system mode) ===
      const themeToggle = document.getElementById('theme-toggle');
      const html = document.documentElement;
      const themeLabel = document.getElementById('theme-label');

      function applyTheme(mode) {
        if (!mode) {
          html.removeAttribute('class'); // fallback to system
          localStorage.removeItem('site-theme');
          themeLabel.textContent = 'system';
        } else {
          html.classList.toggle('dark', mode === 'dark');
          html.classList.toggle('light', mode === 'light');
          localStorage.setItem('site-theme', mode);
          themeLabel.textContent = mode;
        }

        document.getElementById('icon-sun').style.display = mode === 'light' ? 'block' : 'none';
        document.getElementById('icon-moon').style.display = mode === 'dark' ? 'block' : 'none';
      }

      function loadTheme() {
        const savedTheme = localStorage.getItem('site-theme');
        const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        applyTheme(savedTheme || null);
        if (!savedTheme) {
          applyTheme(prefersDark ? 'dark' : 'light');
        }
      }

      themeToggle.addEventListener('click', () => {
        const currentTheme = localStorage.getItem('site-theme');
        let newTheme;
        if (currentTheme === 'light') newTheme = 'dark';
        else if (currentTheme === 'dark') newTheme = null; // system
        else newTheme = 'light';
        applyTheme(newTheme);
        themeToggle.setAttribute('aria-pressed', newTheme === 'dark');
      });

      loadTheme();
    })
    .catch(err => console.error('Error loading navbar:', err));
</script>
Key changes
✅ Restored system mode (now cycles: Light → Dark → System → Light).

✅ Updates #theme-label like before.

✅ Keeps your sun/moon icon swap working.

✅ Ensures the script runs only after navbar is inserted.

If you want, I can rewrite /partials/navbar.html so it has your theme toggle button and system mode ready, then you just keep the above fetch script in every page. That way, it will work exactly like your original toggle did, but live inside the navbar instead of the page body.

Do you want me to prepare that updated navbar.html for you?

You said:
I need it to start on dark and cyle: dark → light → system → dark: 
(function () {
  const storageKey = 'site-theme'; // values: "dark", "light", null
  const html = document.documentElement;
  const toggle = document.getElementById('theme-toggle');
  const iconSun = document.getElementById('icon-sun');
  const iconMoon = document.getElementById('icon-moon');
  const label = document.getElementById('theme-label');

  const saved = localStorage.getItem(storageKey);

  function applyTheme(theme) {
    if (theme === 'dark') {
      html.classList.add('dark', 'dark-mode');
      html.classList.remove('light', 'light-mode');
      iconSun.style.display = 'none';
      iconMoon.style.display = 'inline-block';
      toggle.setAttribute('aria-pressed', 'true');
      label.textContent = 'Dark';
    } else if (theme === 'light') {
      html.classList.add('light', 'light-mode');
      html.classList.remove('dark', 'dark-mode');
      iconSun.style.display = 'inline-block';
      iconMoon.style.display = 'none';
      toggle.setAttribute('aria-pressed', 'false');
      label.textContent = 'Light';
    } else {
      html.classList.remove('dark', 'light', 'dark-mode', 'light-mode');
      const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
      if (prefersDark) {
        iconSun.style.display = 'none';
        iconMoon.style.display = 'inline-block';
        label.textContent = 'System (dark)';
      } else {
        iconSun.style.display = 'inline-block';
        iconMoon.style.display = 'none';
        label.textContent = 'System (light)';
      }
      toggle.setAttribute('aria-pressed', 'false');
    }
  }

  applyTheme(saved);

  toggle.addEventListener('click', () => {
    const current = localStorage.getItem(storageKey);
    if (current === 'dark') {
      localStorage.setItem(storageKey, 'light');
      applyTheme('light');
    } else if (current === 'light') {
      localStorage.removeItem(storageKey);
      applyTheme(null);
    } else {
      localStorage.setItem(storageKey, 'dark');
      applyTheme('dark');
    }
  });

  if (window.matchMedia) {
    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {
      const hasSaved = localStorage.getItem(storageKey) !== null;
      if (!hasSaved) applyTheme(null);
    });
  }
})();
ChatGPT said:
Got it — you want it to always start in dark mode if there’s no saved preference, and cycle through in this order:

dark → light → system → dark

Here’s your updated script:

(function () {
  const storageKey = 'site-theme'; // values: "dark", "light", null
  const html = document.documentElement;
  const toggle = document.getElementById('theme-toggle');
  const iconSun = document.getElementById('icon-sun');
  const iconMoon = document.getElementById('icon-moon');
  const label = document.getElementById('theme-label');

  let saved = localStorage.getItem(storageKey);

  // Force dark mode as the initial state if no preference is saved
  if (!saved) {
    saved = 'dark';
    localStorage.setItem(storageKey, 'dark');
  }

  function applyTheme(theme) {
    if (theme === 'dark') {
      html.classList.add('dark', 'dark-mode');
      html.classList.remove('light', 'light-mode');
      iconSun.style.display = 'none';
      iconMoon.style.display = 'inline-block';
      toggle.setAttribute('aria-pressed', 'true');
      label.textContent = 'Dark';
    } else if (theme === 'light') {
      html.classList.add('light', 'light-mode');
      html.classList.remove('dark', 'dark-mode');
      iconSun.style.display = 'inline-block';
      iconMoon.style.display = 'none';
      toggle.setAttribute('aria-pressed', 'false');
      label.textContent = 'Light';
    } else {
      html.classList.remove('dark', 'light', 'dark-mode', 'light-mode');
      const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
      if (prefersDark) {
        iconSun.style.display = 'none';
        iconMoon.style.display = 'inline-block';
        label.textContent = 'System (dark)';
      } else {
        iconSun.style.display = 'inline-block';
        iconMoon.style.display = 'none';
        label.textContent = 'System (light)';
      }
      toggle.setAttribute('aria-pressed', 'false');
    }
  }

  applyTheme(saved);

  toggle.addEventListener('click', () => {
    const current = localStorage.getItem(storageKey);
    if (current === 'dark') {
      localStorage.setItem(storageKey, 'light');
      applyTheme('light');
    } else if (current === 'light') {
      localStorage.removeItem(storageKey);
      applyTheme(null);
    } else {
      localStorage.setItem(storageKey, 'dark');
      applyTheme('dark');
    }
  });

  if (window.matchMedia) {
    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {
      const hasSaved = localStorage.getItem(storageKey) !== null;
      if (!hasSaved) applyTheme(null);
    });
  }
})();
What changed:
Default to dark mode on first visit:

if (!saved) {
  saved = 'dark';
  localStorage.setItem(storageKey, 'dark');
}
Keeps your click cycle order intact:
dark → light → system → dark

If you drop this in, your site will always start dark first, and still respect the toggle cycle.

Do you want me to also make the system setting auto-update live if the OS theme changes while the user is on the page? That’s possible too.

You said:
doe sthis script go in main.js?
ChatGPT said:
Yes — that script should go in your main.js, since it’s JavaScript that controls theme toggling across your site.

However, you’ll want to make two small changes before putting it in main.js so it:

Starts in dark mode by default

Cycles exactly dark → light → system → dark

Here’s the cleaned-up version you can drop into main.js:

(function () {
  const storageKey = 'site-theme'; // values: "dark", "light", null
  const html = document.documentElement;
  const toggle = document.getElementById('theme-toggle');
  const iconSun = document.getElementById('icon-sun');
  const iconMoon = document.getElementById('icon-moon');
  const label = document.getElementById('theme-label');

  // If nothing is saved yet, start in dark mode
  if (!localStorage.getItem(storageKey)) {
    localStorage.setItem(storageKey, 'dark');
  }

  function applyTheme(theme) {
    if (theme === 'dark') {
      html.classList.add('dark', 'dark-mode');
      html.classList.remove('light', 'light-mode');
      iconSun.style.display = 'none';
      iconMoon.style.display = 'inline-block';
      toggle.setAttribute('aria-pressed', 'true');
      label.textContent = 'Dark';
    } else if (theme === 'light') {
      html.classList.add('light', 'light-mode');
      html.classList.remove('dark', 'dark-mode');
      iconSun.style.display = 'inline-block';
      iconMoon.style.display = 'none';
      toggle.setAttribute('aria-pressed', 'false');
      label.textContent = 'Light';
    } else {
      html.classList.remove('dark', 'light', 'dark-mode', 'light-mode');
      const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
      if (prefersDark) {
        iconSun.style.display = 'none';
        iconMoon.style.display = 'inline-block';
        label.textContent = 'System (dark)';
      } else {
        iconSun.style.display = 'inline-block';
        iconMoon.style.display = 'none';
        label.textContent = 'System (light)';
      }
      toggle.setAttribute('aria-pressed', 'false');
    }
  }

  // Apply saved or default theme
  applyTheme(localStorage.getItem(storageKey));

  toggle.addEventListener('click', () => {
    const current = localStorage.getItem(storageKey);
    if (current === 'dark') {
      localStorage.setItem(storageKey, 'light');
      applyTheme('light');
    } else if (current === 'light') {
      localStorage.removeItem(storageKey);
      applyTheme(null);
    } else {
      localStorage.setItem(storageKey, 'dark');
      applyTheme('dark');
    }
  });

  // Watch for system theme changes when in system mode
  if (window.matchMedia) {
    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {
      const hasSaved = localStorage.getItem(storageKey) !== null;
      if (!hasSaved) applyTheme(null);
    });
  }
})();
Placement:

Save this in main.js.

Make sure your HTML has:

The toggle button with id="theme-toggle".

The sun and moon icons with id="icon-sun" and id="icon-moon".

A label with id="theme-label" (optional but recommended).

Load main.js at the bottom of your HTML or with defer in the <head> so the DOM is ready.

If you want, I can give you the exact HTML markup to pair with this so the cycle works perfectly. That way you won’t have to guess on IDs.

You said:
It now starts on light and cycles: light → dark → light. There is no system theme in the cycle as there should be. My index is : 
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Malone University</title>
  <link rel="icon" href="/images/favicon.ico" type="image/x-icon" />
  <link rel="stylesheet" href="/css/mgu.css" />
  </head>

<body>
<Header>
  <div class="container">
    <header role="banner">
      <a class="brand" href="#" aria-label="Homepage">
        <span class="logo" aria-hidden="true">MU</span>
        <div>
          <h1>Malone Global University</h1>
          <p class="lead">Permanent Home For Truth, Justice, and Freedom</p>
        </div>
      </a>
<div id="navbar-placeholder"></div>

     
    </header>

    <main>
      <section class="hero">
        <div class="card intro" aria-labelledby="welcome-title">
          <h2 id="welcome-title">Beautiful dark mode, accessible & persistent</h2>
          <p class="lead">This page demonstrates a practical dark-mode setup using CSS variables, an accessible toggle, and localStorage to remember the user's choice.</p>

          <div class="actions" role="toolbar" aria-label="Sample actions">
            <button class="btn">Get started</button>
            <button class="btn ghost">Learn more</button>
          </div>

          <div class="features" aria-hidden="false">
            <div class="feature">
              <h3>Respects system theme</h3>
              <p>Defaults to your OS preference, but user selection persists.</p>
            </div>
            <div class="feature">
              <h3>Accessible toggle</h3>
              <p>Keyboard-focusable, ARIA aria-pressed and visible focus ring.</p>
            </div>
            <div class="feature">
              <h3>Easy to customize</h3>
              <p>Tweak CSS variables at the top to change colors quickly.</p>
            </div>
            <div class="feature">
              <h3>Responsive</h3>
              <p>Designed to look good on phone, tablet, and desktop.</p>
            </div>
          </div>

          <h3 style="margin-top:16px">Tiny code sample</h3>
          <pre><code>&lt;script&gt;
// read stored theme, apply to &lt;html&gt;:
// localStorage.setItem('site-theme', 'dark' | 'light' | null)
&lt;/script&gt;</code></pre>
        </div>

        <aside class="card" aria-label="Quick settings">
          <h3 style="margin-top:0">Quick settings</h3>
          <p style="color:var(--muted)">Current theme is shown by the toggle — press it to switch themes. Your choice will be remembered.</p>

          <div style="margin-top:16px">
            <strong>Theme:</strong> <span id="theme-label">—</span>
          </div>

          <hr style="margin:14px 0;border:0;border-top:1px solid rgba(255,255,255,0.03)">

          <div>
            <h4 style="margin:8px 0">Example code</h4>
            <pre><code>&lt;html class="dark"&gt; &lt;!-- or remove to use light --&gt;</code></pre>
          </div>
        </aside>
      </section>
    </main>


    <footer>
  <p>© 2025 Malone University. Building the future, on our own terms.</p>
  <p>
    <a href="https://twitter.com/MaloneGlobal" target="_blank" rel="noopener noreferrer" aria-label="Follow Malone University on Twitter">Twitter</a> |
    <a href="https://facebook.com/YOUR_HANDLE" target="_blank" rel="noopener noreferrer" aria-label="Follow Malone University on Facebook">Facebook</a> |
    <a href="https://instagram.com/maloneglobaluniversity" target="_blank" rel="noopener noreferrer" aria-label="Follow Malone University on Instagram">Instagram</a> |
    <a href='/static/terms'>Terms</a> |
    <a href='/static/contact'>Contact</a>
  </p>
</footer>


<script src="/data/main.js"></script>
<script>
  fetch('/partials/navbar.html')
    .then(res => res.text())
    .then(data => {
      document.getElementById('navbar-placeholder').innerHTML = data;

      // === Mobile menu toggle ===
      const navToggle = document.querySelector('.nav-toggle');
      const navLinks = document.querySelector('.nav-links');
      navToggle.addEventListener('click', () => {
        const expanded = navToggle.getAttribute('aria-expanded') === 'true';
        navToggle.setAttribute('aria-expanded', !expanded);
        navLinks.classList.toggle('open');
      });

      // === Theme toggle ===
      const themeToggle = document.getElementById('theme-toggle');
      const html = document.documentElement;

      function setTheme(mode) {
        if (mode) {
          html.classList.toggle('dark', mode === 'dark');
          localStorage.setItem('site-theme', mode);
        } else {
          html.classList.remove('dark');
          localStorage.removeItem('site-theme');
        }
      }

      function loadTheme() {
        const savedTheme = localStorage.getItem('site-theme');
        const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        const mode = savedTheme || (prefersDark ? 'dark' : 'light');
        setTheme(mode);
      }

      themeToggle.addEventListener('click', () => {
        const currentTheme = localStorage.getItem('site-theme') || (html.classList.contains('dark') ? 'dark' : 'light');
        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
        setTheme(newTheme);
        themeToggle.setAttribute('aria-pressed', newTheme === 'dark');
        document.getElementById('icon-sun').style.display = newTheme === 'light' ? 'block' : 'none';
        document.getElementById('icon-moon').style.display = newTheme === 'dark' ? 'block' : 'none';
      });

      loadTheme();
    })
    .catch(err => console.error('Error loading navbar:', err));
</script>

</body>
</html>
ChatGPT said:
The reason your page starts in light and only cycles light → dark → light is because the script inside your HTML only implements a two-state toggle — there’s no logic for a third “system” state.

Right now this part:

const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
is always flipping between only two values.

If you want dark → light → system → dark, you need to:

Allow null in localStorage to represent “system” (meaning “no saved preference”).

Adjust the setTheme and loadTheme functions to handle null.

Update the click handler to cycle through the three states.

Here’s the fixed drop-in replacement for your current <script> in the HTML file:

// === Theme toggle ===
const themeToggle = document.getElementById('theme-toggle');
const html = document.documentElement;

function applyTheme(mode) {
  if (mode === 'dark') {
    html.classList.add('dark');
    html.classList.remove('light');
    localStorage.setItem('site-theme', 'dark');
    themeToggle.setAttribute('aria-pressed', 'true');
    document.getElementById('icon-sun').style.display = 'none';
    document.getElementById('icon-moon').style.display = 'block';
    document.getElementById('theme-label').textContent = 'Dark';
  } else if (mode === 'light') {
    html.classList.add('light');
    html.classList.remove('dark');
    localStorage.setItem('site-theme', 'light');
    themeToggle.setAttribute('aria-pressed', 'false');
    document.getElementById('icon-sun').style.display = 'block';
    document.getElementById('icon-moon').style.display = 'none';
    document.getElementById('theme-label').textContent = 'Light';
  } else {
    // System mode: remove explicit theme, follow OS preference
    html.classList.remove('dark', 'light');
    localStorage.removeItem('site-theme');
    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
    themeToggle.setAttribute('aria-pressed', prefersDark ? 'true' : 'false');
    document.getElementById('icon-sun').style.display = prefersDark ? 'none' : 'block';
    document.getElementById('icon-moon').style.display = prefersDark ? 'block' : 'none';
    document.getElementById('theme-label').textContent = prefersDark ? 'System (dark)' : 'System (light)';
  }
}

function loadTheme() {
  const savedTheme = localStorage.getItem('site-theme');
  if (savedTheme) {
    applyTheme(savedTheme);
  } else {
    applyTheme(null); // System
  }
}

themeToggle.addEventListener('click', () => {
  const savedTheme = localStorage.getItem('site-theme');
  let nextTheme;
  if (savedTheme === 'dark') {
    nextTheme = 'light';
  } else if (savedTheme === 'light') {
    nextTheme = null; // System
  } else {
    nextTheme = 'dark';
  }
  applyTheme(nextTheme);
});

loadTheme();

// Optional: Listen for OS theme changes when in system mode
window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {
  if (!localStorage.getItem('site-theme')) {
    applyTheme(null);
  }
});
Key changes vs. your current code:

Added system mode as null in localStorage.

Updated applyTheme to handle all three states.

Changed click handler to cycle:
dark → light → system → dark.

Added a matchMedia listener so if the user changes their OS theme while in system mode, the page updates instantly.

If you want, I can rewrite your main.js so it completely replaces both the inline theme code and the dark/light logic in your HTML, meaning you’d have one clean theme manager instead of scattered logic. That would keep things simpler and easier to debug.

You said:
yes
ChatGPT said:
Got it — yes, that theme-cycling script should go inside your main.js file so it’s applied to all your pages that include main.js.

To make it start in dark mode and follow your desired cycle:

Keep your code in main.js.

Add a default set at the very start if nothing is saved in localStorage.

Here’s the updated version:

(function () {
  const storageKey = 'site-theme';
  const html = document.documentElement;
  const toggle = document.getElementById('theme-toggle');
  const iconSun = document.getElementById('icon-sun');
  const iconMoon = document.getElementById('icon-moon');
  const label = document.getElementById('theme-label');

  // If no saved preference, default to dark mode
  if (!localStorage.getItem(storageKey)) {
    localStorage.setItem(storageKey, 'dark');
  }

  const saved = localStorage.getItem(storageKey);

  function applyTheme(theme) {
    if (theme === 'dark') {
      html.classList.add('dark', 'dark-mode');
      html.classList.remove('light', 'light-mode');
      iconSun.style.display = 'none';
      iconMoon.style.display = 'inline-block';
      toggle.setAttribute('aria-pressed', 'true');
      label.textContent = 'Dark';
    } else if (theme === 'light') {
      html.classList.add('light', 'light-mode');
      html.classList.remove('dark', 'dark-mode');
      iconSun.style.display = 'inline-block';
      iconMoon.style.display = 'none';
      toggle.setAttribute('aria-pressed', 'false');
      label.textContent = 'Light';
    } else {
      html.classList.remove('dark', 'light', 'dark-mode', 'light-mode');
      const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
      if (prefersDark) {
        iconSun.style.display = 'none';
        iconMoon.style.display = 'inline-block';
        label.textContent = 'System (dark)';
      } else {
        iconSun.style.display = 'inline-block';
        iconMoon.style.display = 'none';
        label.textContent = 'System (light)';
      }
      toggle.setAttribute('aria-pressed', 'false');
    }
  }

  applyTheme(saved);

  toggle.addEventListener('click', () => {
    const current = localStorage.getItem(storageKey);
    if (current === 'dark') {
      localStorage.setItem(storageKey, 'light');
      applyTheme('light');
    } else if (current === 'light') {
      localStorage.removeItem(storageKey);
      applyTheme(null);
    } else {
      localStorage.setItem(storageKey, 'dark');
      applyTheme('dark');
    }
  });

  if (window.matchMedia) {
    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {
      const hasSaved = localStorage.getItem(storageKey) !== null;
      if (!hasSaved) applyTheme(null);
    });
  }
})();
That way:

First visit → Dark mode loads.

Toggle → Light mode.

Toggle again → System preference.

Toggle again → Back to Dark mode.

If you want, I can also give you the HTML snippet for the button and icons so it’s fully wired up.

You said:
give me it
ChatGPT said:
Here’s your updated main.js version that starts on dark and cycles dark → light → system → dark:

(function () {
  const storageKey = 'site-theme'; // "dark", "light", or null for system
  const html = document.documentElement;
  const toggle = document.getElementById('theme-toggle');
  const iconSun = document.getElementById('icon-sun');
  const iconMoon = document.getElementById('icon-moon');
  const label = document.getElementById('theme-label');

  let saved = localStorage.getItem(storageKey);

  // If no theme is saved, start with dark
  if (!saved) {
    saved = 'dark';
    localStorage.setItem(storageKey, 'dark');
  }

  function applyTheme(theme) {
    if (theme === 'dark') {
      html.classList.add('dark', 'dark-mode');
      html.classList.remove('light', 'light-mode');
      iconSun.style.display = 'none';
      iconMoon.style.display = 'inline-block';
      toggle.setAttribute('aria-pressed', 'true');
      label.textContent = 'Dark';
    } else if (theme === 'light') {
      html.classList.add('light', 'light-mode');
      html.classList.remove('dark', 'dark-mode');
      iconSun.style.display = 'inline-block';
      iconMoon.style.display = 'none';
      toggle.setAttribute('aria-pressed', 'false');
      label.textContent = 'Light';
    } else {
      html.classList.remove('dark', 'light', 'dark-mode', 'light-mode');
      const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
      if (prefersDark) {
        iconSun.style.display = 'none';
        iconMoon.style.display = 'inline-block';
        label.textContent = 'System (dark)';
      } else {
        iconSun.style.display = 'inline-block';
        iconMoon.style.display = 'none';
        label.textContent = 'System (light)';
      }
      toggle.setAttribute('aria-pressed', 'false');
    }
  }

  applyTheme(saved);

  toggle.addEventListener('click', () => {
    const current = localStorage.getItem(storageKey);
    if (current === 'dark') {
      localStorage.setItem(storageKey, 'light');
      applyTheme('light');
    } else if (current === 'light') {
      localStorage.removeItem(storageKey);
      applyTheme(null); // system
    } else {
      localStorage.setItem(storageKey, 'dark');
      applyTheme('dark');
    }
  });

  if (window.matchMedia) {
    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {
      const hasSaved = localStorage.getItem(storageKey) !== null;
      if (!hasSaved) applyTheme(null);
    });
  }
})();
This will ensure:

First visit starts in dark mode.

Each click cycles dark → light → system → dark.

Still respects system preference when in system mode.

Do you want me to also give you the HTML toggle button snippet that matches this JS? That way it’ll work right away.

You said:
yes
ChatGPT said:
Here’s your updated main.js so it starts in dark mode and cycles in the order:

dark → light → system → dark

(function () {
  const storageKey = 'site-theme'; // "dark", "light", or null (system)
  const html = document.documentElement;
  const toggle = document.getElementById('theme-toggle');
  const iconSun = document.getElementById('icon-sun');
  const iconMoon = document.getElementById('icon-moon');
  const label = document.getElementById('theme-label');

  // Load saved theme or default to dark
  let saved = localStorage.getItem(storageKey);
  if (!saved) {
    saved = 'dark';
    localStorage.setItem(storageKey, 'dark');
  }

  function applyTheme(theme) {
    if (theme === 'dark') {
      html.classList.add('dark', 'dark-mode');
      html.classList.remove('light', 'light-mode');
      iconSun.style.display = 'none';
      iconMoon.style.display = 'inline-block';
      toggle.setAttribute('aria-pressed', 'true');
      label.textContent = 'Dark';
    } else if (theme === 'light') {
      html.classList.add('light', 'light-mode');
      html.classList.remove('dark', 'dark-mode');
      iconSun.style.display = 'inline-block';
      iconMoon.style.display = 'none';
      toggle.setAttribute('aria-pressed', 'false');
      label.textContent = 'Light';
    } else {
      html.classList.remove('dark', 'light', 'dark-mode', 'light-mode');
      const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
      if (prefersDark) {
        iconSun.style.display = 'none';
        iconMoon.style.display = 'inline-block';
        label.textContent = 'System (dark)';
      } else {
        iconSun.style.display = 'inline-block';
        iconMoon.style.display = 'none';
        label.textContent = 'System (light)';
      }
      toggle.setAttribute('aria-pressed', 'false');
    }
  }

  // Apply the initial theme
  applyTheme(saved);

  // Cycle through dark → light → system → dark
  toggle.addEventListener('click', () => {
    const current = localStorage.getItem(storageKey);
    if (current === 'dark') {
      localStorage.setItem(storageKey, 'light');
      applyTheme('light');
    } else if (current === 'light') {
      localStorage.removeItem(storageKey);
      applyTheme(null);
    } else {
      localStorage.setItem(storageKey, 'dark');
      applyTheme('dark');
    }
  });

  // Listen for system theme changes when in system mode
  if (window.matchMedia) {
    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {
      const hasSaved = localStorage.getItem(storageKey) !== null;
      if (!hasSaved) applyTheme(null);
    });
  }
})();
If you drop this into your main.js, the site will:

Load dark mode by default on first visit

Remember the last theme you picked

Toggle in the correct order with each click

I can also give you the matching HTML toggle button markup if you don’t have it set up yet. That way, it’ll be fully functional out of the box.