Great question 👍 — let me show you exactly how a version naming system works for your scripts. Think of it like keeping “snapshots” of your work, so you always know which one is the stable base and which ones are experimental upgrades.

🔹 1. File Naming Convention

Each script has a clear version number in its filename:

md_to_html_v1.0.py → the very first, minimal working script (your “base”).

md_to_html_v1.1.py → small improvement (maybe adds images or lists).

md_to_html_v1.2.py → another improvement (maybe adds blockquotes).

md_to_html_v2.0.py → a bigger change (maybe switches from regex to a parser).

That way you never overwrite your working versions — you just clone and rename.

🔹 2. Folder Organization

You can also keep them in a dedicated folder for clarity:

C:/MGU/scripts/
│
├── md_to_html_v1.0.py   # Base, never touched
├── md_to_html_v1.1.py   # Adds more markdown rules
├── md_to_html_v1.2.py   # Adds templating
├── md_to_html_v2.0.py   # Major rewrite, parser-based


This keeps everything traceable, so later you can look back and say:

"Oh, Version 1.0 was my clean base, Version 2.0 is my parser experiment."

🔹 3. Inside the Script

It’s also good to label the version inside the script.
For example, at the very top:

"""
MD to HTML Converter
Version: 1.0
Date: 2025-08-16
Author: Malone Global University

This is the clean base version. 
Only minimal Markdown → HTML rules are implemented.
"""


That way, if you ever open v1.0, you know exactly what it is without guessing.

🔹 4. Workflow Example

You start with md_to_html_v1.0.py (base).

You duplicate it, rename it md_to_html_v1.1.py.

In v1.1, you add lists and images.

Later, you make a major redesign → you clone v1.1 into v2.0 and rewrite it using a library like markdown-it-py.

v1.0 never changes — it’s your “known good checkpoint.”

✅ This is the same system developers use in professional software (it’s basically manual version control). Later, you could even use Git tags to mark v1.0, v1.1, etc. — but naming files this way works just fine if you want simplicity.

Do you want me to make you a ready-to-use “v1.0 base script” file with the version header inside it so it’s already formatted for this system?

I prefer this response