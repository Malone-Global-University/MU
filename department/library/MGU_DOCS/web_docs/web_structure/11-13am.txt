Perfect! Let’s enhance the generator to automatically create Previous/Next lesson navigation based on the alphabetical lesson index. These links will be injected directly into the lesson page under <main> as a .lesson-nav div.

Changes in the Generator

After updating the lessons index, calculate the current lesson’s position.

Determine the previous and next lesson.

Generate a .lesson-nav block.

Inject it into the lesson skeleton HTML before closing </main>.

Code Snippet: Automatic Previous/Next

Add this after Step 9 (lessons index) in your generator script:

// -------------------------
// Step 9b: Previous / Next lesson navigation
// -------------------------
const lessonFiles = existingLessons.map(l => l.file);
const currentIndex = lessonFiles.indexOf(`${lessonName}.html`);
const prevLesson = currentIndex > 0 ? lessonFiles[currentIndex - 1] : null;
const nextLesson = currentIndex < lessonFiles.length - 1 ? lessonFiles[currentIndex + 1] : null;

let navLinksHtml = '';
if (prevLesson || nextLesson) {
  navLinksHtml = `<div class="lesson-nav">`;
  if (prevLesson) navLinksHtml += `<a href="../${prevLesson}">⬅ Previous</a>`;
  if (nextLesson) navLinksHtml += `<a href="../${nextLesson}">Next ➡</a>`;
  navLinksHtml += `</div>`;
}

// Inject navLinksHtml into lesson skeleton
lessonHtmlContent = lessonHtmlContent.replace('</main>', `${navLinksHtml}\n  </main>`);
fs.writeFileSync(lessonHtmlPath, lessonHtmlContent, 'utf8');
console.log("Injected Previous/Next navigation links");

Example Output

If your alphabetical index is:

Lesson 8

Lesson 9 (current)

Lesson 10

Then on Lesson 9 page, the navigation block will be:

<div class="lesson-nav">
  <a href="../lesson8.html">⬅ Previous</a>
  <a href="../lesson10.html">Next ➡</a>
</div>


On Lesson 8 page, only Next appears; on Lesson 10 page, only Previous appears.

✅ Benefits

Fully automatic, no manual editing.

Updates as soon as lessons are added/removed.

Uses existing alphabetical index logic.

Works seamlessly with your component-based architecture.

If you want, I can now merge this step directly into the full metadata-driven generator, so running a single command creates the lesson, sections, hero, navbar, footer, lesson-nav links, and updates index automatically.

Do you want me to produce that fully merged final version?