<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>Pro-Level Radicals Formatter</title>
<style>
.math {
    font-family: "Times New Roman", serif;
    font-size: 18px;
    white-space: pre;
}
.sup { vertical-align: super; font-size: 0.7em; }
.sub { vertical-align: sub; font-size: 0.7em; }
.frac { display: inline-block; vertical-align: middle; text-align: center; margin: 0 0.1em; }
.frac span { display: block; line-height: 1; }
.frac .num { border-bottom: 1px solid black; }
.frac .den { display: block; }
.sqrt { display: inline-block; border-top: 1px solid black; padding: 0 0.2em; margin-left: 0.2em; position: relative; }
.nth-root { display: inline-block; vertical-align: super; font-size: 0.6em; margin-right: -0.5em; position: relative; }
</style>
</head>
<body>

<p class="math">sqrt(x+1)</p>
<p class="math">root(3, x+1)</p>
<p class="math">sqrt((a+b)/(c+d))</p>
<p class="math">root(4, sqrt(x^2+y^2))</p>

<script>
document.addEventListener("DOMContentLoaded", function() {

    function formatMath(html) {

        // Handle sqrt(radical)
        const sqrtRegex = /sqrt\(([^()]+)\)/;
        while (sqrtRegex.test(html)) {
            html = html.replace(sqrtRegex, (match, content) => {
                return `<span class="sqrt">${formatMath(content)}</span>`;
            });
        }

        // Handle nth roots: root(n, radicand)
        const nthRootRegex = /root\((\d+),\s*([^)]+)\)/;
        while (nthRootRegex.test(html)) {
            html = html.replace(nthRootRegex, (match, n, content) => {
                return `<span class="nth-root">${n}</span><span class="sqrt">${formatMath(content)}</span>`;
            });
        }

        return html;
    }

    const mathBlocks = document.querySelectorAll(".math");
    mathBlocks.forEach(block => {
        block.innerHTML = formatMath(block.innerHTML);
    });

});
</script>

</body>
</html>
