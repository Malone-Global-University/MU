<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>Ultimate Pro Math Formatter</title>
<style>
.math {
    font-family: "Times New Roman", serif;
    font-size: 18px;
    white-space: pre;
}
.sup {
    vertical-align: super;
    font-size: 0.7em;
}
.sub {
    vertical-align: sub;
    font-size: 0.7em;
}
.frac {
    display: inline-block;
    vertical-align: middle;
    text-align: center;
    margin: 0 0.1em;
}
.frac span {
    display: block;
    line-height: 1;
}
.frac .num {
    border-bottom: 1px solid black;
}
.frac .den {
    display: block;
}
.sqrt {
    display: inline-block;
    border-top: 1px solid black;
    padding: 0 0.1em;
}
</style>
</head>
<body>

<p class="math">(a+b)/(c+d)</p>
<p class="math">x^2^3 + y_1^2 = z^2</p>
<p class="math">sqrt(x^2 + y^2)</p>
<p class="math">(x + y)/(a/b + c^2)</p>
<p class="math">\alpha + \beta = \theta - \gamma</p>
<p class="math">\sum_{i=1}^{n} i^2</p>
<p class="math">\int_{0}^{\pi} sin(x) dx</p>

<script>
document.addEventListener("DOMContentLoaded", function() {

    const greekMap = {
        "\\alpha":"α","\\beta":"β","\\gamma":"γ",
        "\\theta":"θ","\\pi":"π","\\lambda":"λ",
        "\\mu":"μ","\\sigma":"σ","\\delta":"δ"
    };

    function formatMath(html) {
        // 1. Greek letters
        for(const key in greekMap){
            html = html.replace(new RegExp(key,"g"), greekMap[key]);
        }

        // 2. Operators
        html = html.replace(/(^| )-($| )/g," &minus; ");
        html = html.replace(/\*/g," × ");
        html = html.replace(/\//g," ÷ ");

        // 3. Superscripts and subscripts
        html = html.replace(/([A-Za-z0-9\)\]]+)\^([A-Za-z0-9\(\[\]]+)/g,"$1<sup class='sup'>$2</sup>");
        html = html.replace(/([A-Za-z0-9\)\]]+)_([A-Za-z0-9\(\[\]]+)/g,"$1<sub class='sub'>$2</sub>");

        // 4. Fractions recursively
        const fracRegex = /\(([^()]+)\)\/\(([^()]+)\)/;
        while(fracRegex.test(html)){
            html = html.replace(fracRegex,(match,num,den)=>{
                return `<span class="frac"><span class="num">${formatMath(num)}</span><span class="den">${formatMath(den)}</span></span>`;
            });
        }

        // 5. Square roots recursively
        const sqrtRegex = /sqrt\(([^()]+)\)/;
        while(sqrtRegex.test(html)){
            html = html.replace(sqrtRegex,(match,content)=>{
                return `<span class="sqrt">${formatMath(content)}</span>`;
            });
        }

        // 6. Summations with limits
        html = html.replace(/\\sum(_\{[^}]+\})?\^(\{[^}]+\})?/g,"∑");

        // 7. Integrals
        html = html.replace(/\\int(_\{[^}]+\})?\^(\{[^}]+\})?/g,"∫");

        // 8. Normalize spacing
        html = html.replace(/\s+/g," ").trim();

        return html;
    }

    const mathBlocks = document.querySelectorAll(".math");
    mathBlocks.forEach(block=>{
        block.innerHTML = formatMath(block.innerHTML);
    });

});
</script>

</body>
</html>
