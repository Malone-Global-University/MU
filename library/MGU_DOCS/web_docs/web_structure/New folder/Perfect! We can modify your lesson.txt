Perfect! We can modify your lesson generator script to automatically inject the lesson navigation CSS into components/css/theme.css if it doesn’t already exist. This ensures all lessons get styled correctly without manual edits.

1. Add CSS Injection to Script

Place this snippet after step 4 in your existing generator script:

// --- Step 5: Ensure lesson navigation CSS exists ---
const themeCssPath = path.join(__dirname, 'components', 'css', 'theme.css');
const lessonNavCss = `
/* ===== LESSON NAVIGATION ===== */
.lesson-nav {
  display: flex;
  justify-content: space-between;
  margin-top: 2rem;
  padding: 1rem 0;
  border-top: 2px solid var(--accent);
}

.lesson-nav a {
  padding: 0.5rem 1rem;
  background: var(--card);
  color: var(--accent);
  font-weight: 600;
  border-radius: 6px;
  text-decoration: none;
  transition: background 0.3s ease, color 0.3s ease;
}

.lesson-nav a:hover {
  background: var(--accent);
  color: var(--card);
}

@media (max-width: 600px) {
  .lesson-nav {
    flex-direction: column;
    gap: 1rem;
    align-items: center;
  }
  .lesson-nav a {
    width: 100%;
    text-align: center;
  }
}
`;

// Inject CSS only if not already present
if (fs.existsSync(themeCssPath)) {
  const themeContent = fs.readFileSync(themeCssPath, 'utf8');
  if (!themeContent.includes('.lesson-nav')) {
    fs.appendFileSync(themeCssPath, lessonNavCss, 'utf8');
    console.log('Added lesson navigation CSS to theme.css');
  }
} else {
  // Create theme.css if missing
  fs.mkdirSync(path.dirname(themeCssPath), { recursive: true });
  fs.writeFileSync(themeCssPath, lessonNavCss, 'utf8');
  console.log('Created theme.css and added lesson navigation CSS');
}

2. What This Does

Checks if components/css/theme.css exists.

If it exists, only appends the .lesson-nav CSS if it’s not already there.

If it doesn’t exist, creates the file and writes the lesson navigation CSS.

Ensures all lesson pages automatically have styled Previous/Next navigation.

✅ After this, every new lesson:

Gets its components generated.

HTML skeleton created with Prev/Next links.

Lessons index updated alphabetically.

Navigation CSS automatically applied if missing.

If you want, I can now merge all these updates into a single fully optimized generate-lesson-flex.js script that does components, HTML, index, prev/next, and CSS injection in one run.

Do you want me to do that?