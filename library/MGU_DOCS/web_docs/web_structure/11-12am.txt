
11:12 AM 8/16/2025
Perfect! Let’s take your generator to the next level by adding lesson metadata support so that hero text, section headings, and placeholders are automatically generated without manually editing HTML files.

We’ll do this using a lesson-config JSON file for each lesson.

1. Lesson Metadata File

Create a lesson-configs folder in your project root. For a new lesson, you can create a JSON file:

Example: lesson-configs/lesson9.json

{
  "title": "Lesson 9: Information Architecture Advanced",
  "hero": {
    "title": "Master Information Architecture",
    "subtitle": "Design websites that users can navigate effortlessly."
  },
  "sections": [
    {
      "id": "introduction",
      "title": "Introduction",
      "content": "Welcome to Lesson 9! In this lesson, we dive deeper into IA concepts."
    },
    {
      "id": "key-concepts",
      "title": "Key Concepts",
      "content": "Understand mental models, navigation patterns, and hybrid structures."
    },
    {
      "id": "diagrams",
      "title": "Visual Diagrams",
      "content": "Here are illustrative diagrams for IA structures."
    },
    {
      "id": "exercises",
      "title": "Exercises",
      "content": "Try redesigning a messy sitemap using the concepts you've learned."
    },
    {
      "id": "summary",
      "title": "Summary",
      "content": "Keep your site logical, consistent, and user-friendly."
    }
  ]
}

2. Generator Enhancements

Read the lesson metadata JSON.

Generate section HTML components automatically using the id, title, and content.

Generate hero section based on the lesson-specific hero text.

Still use global site-config for navbar and footer.

Pseudo Code for Enhanced Generator
// Load site-config.json (global)
const siteConfig = ...;

// Load lesson metadata JSON
const lessonMetaPath = path.join(__dirname, 'lesson-configs', `${lessonName}.json`);
if (!fs.existsSync(lessonMetaPath)) {
  console.error("Lesson metadata JSON not found:", lessonMetaPath);
  process.exit(1);
}
const lessonMeta = JSON.parse(fs.readFileSync(lessonMetaPath, 'utf8'));

// Create components folder
const lessonDir = path.join(__dirname, 'components', lessonName);
if (!fs.existsSync(lessonDir)) fs.mkdirSync(lessonDir, { recursive: true });

// Generate section components
lessonMeta.sections.forEach(section => {
  const sectionHtml = `<section id="${section.id}">
  <h2>${section.title}</h2>
  <p>${section.content}</p>
</section>`;
  const sectionPath = path.join(lessonDir, `${section.id}.html`);
  fs.writeFileSync(sectionPath, sectionHtml, 'utf8');
});

// Generate hero component
const heroHtmlPath = path.join(__dirname, 'components', 'hero.html');
const heroHtml = `<div class="hero">
  <h1>${lessonMeta.hero.title}</h1>
  <p>${lessonMeta.hero.subtitle}</p>
</div>`;
fs.writeFileSync(heroHtmlPath, heroHtml, 'utf8');

// Remaining steps: same as before
// - Create lesson skeleton HTML
// - Inject lesson-nav CSS
// - Update lessons/index.html
// - Add Previous/Next links

3. Benefits

No manual HTML edits: all section content is generated from metadata.

Hero customization per lesson: each lesson can have unique hero title/subtitle.

Sections automatically scaffolded: each id, title, and content is injected.

Fully modular: works with your current theme and component system.

Easy updates: changing section content in JSON automatically regenerates the lesson page.

I can now merge this metadata feature directly into your fully automated generate-lesson.js script, so a single command creates:

Navbar

Hero (lesson-specific)

Sections (auto-generated)

Footer

Skeleton HTML

Prev/Next navigation

Alphabetical index

Lesson nav CSS

Do you want me to do that next?