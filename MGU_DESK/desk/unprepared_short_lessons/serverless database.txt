What is a serverless database?
A serverless database is database technology where the underlying database servers and IT infrastructure are fully managed for you by a third-party cloud provider. Traditionally, organizations deployed database systems on self-managed servers and had to ensure server configurations were updated and well-maintained as demand increased. In contrast, serverless databases run on fully managed cloud infrastructure and scale elastically as workloads change. Popular serverless databases can be relational databases or NoSQL databases. They provide inherent availability, fault tolerance, and reliability—you only pay for actual database usage. Service level agreements (SLAs) govern performance capabilities so you can confidently focus on data collection and analysis instead of database infrastructure.

Learn more about databases »

Learn more about NoSQL databases »

What are the benefits of a serverless database?
Businesses can gain several benefits from using serverless databases.

Scalability
Serverless databases offer instant scalability to accommodate large transaction volumes. With scaling on demand, you ensure that your database can handle spikes in workload without experiencing reduced performance. A scalable database provides businesses with reliable performance regardless of traffic.

Reliability
Third-party providers that offer serverless database services use a range of serverless functions to ensure high availability. They ensure durability by protecting against different forms of data loss. For example, serverless databases offer read replicas, availability zones, and cloning to increase reliability. They offer self-healing, fault-tolerance, and distributed data strategies to provide durability.

Ease of management
Serverless databases offer automated database management, removing the need for you to manage resources. You can divert database maintenance roles towards business development functions. The cloud provider manages the database in the cloud for you. 

Businesses can fine-tune their use of serverless databases over time to ensure they only pay for the database resources and capacity they use. Granular scalability helps to align cost and usage to find an effective balance. 

Pay-as-you-go pricing 
Serverless databases use a pay-as-you-go pricing model, charging users based on consumption. This flexible approach supports variable consumption and provides the best cost value for businesses. 

What are the use cases of a serverless database?
The following are some use cases for a serverless database strategy.

Variable workloads
Businesses that use applications with irregular usage patterns can face problems when provisioning resources. Certain events can cause a surge in traffic. For example, public events can cause a spike in social media traffic as people log on. Serverless databases provide the flexibility to handle increased interactions and data processing without lowering responsiveness. A serverless database can scale granularly to fulfill resource demands during peak times without incurring costs for idle resources during less active periods. 

Enterprise database fleet management
Larger enterprises may have hundreds or even thousands of applications running simultaneously. These applications may share resources or have individual databases. Manually managing the fluctuations in resource consumption and demand across a large number of applications is challenging. Instead, companies can use a serverless database system to automatically adjust availability and performance based on individual application demand. This approach ensures high availability, performance, and recovery without tackling complex management tasks.

Software as a Service applications
Software as a Service (SaaS) providers sometimes manage individual database instances for every customer. While they can place these database instances in a single cluster, they still need to manage each database individually. A serverless database solution allows SaaS vendors to provision database clusters for each customer without worrying about additional costs. When a database is not in use, it will shut down to reduce resource consumption.

Scaled-out databases
You can split databases across several instances to improve throughput when dealing with high read or write requirements. When splitting databases with a serverless database, you can automatically adjust capacity to match demand. A serverless database approach reduces downtime and offers the exact capacity that applications need.

Infrequently used applications
Some applications that use traditional databases only use their resources infrequently. For example, software development and quality assurance teams do not need access to development databases during nights or weekends. If an application or website only receives activity for a few minutes daily, paying for around-the-clock support is an unnecessary expense. Companies that use a serverless database only need to pay for the resources they use, providing an effective solution to this problem. Serverless databases automatically shut down when not in use.

How do serverless databases work?
Serverless databases represent a significant shift in how databases are managed and used. All management tasks like backups, maintenance, and updates are fully managed by the cloud service provider. A serverless database also supports all other vital database functions, like providing security access controls, synchronization with offline data access, and support for development libraries. They use encryption, resource-level permissions, network isolation, and advanced auditing to keep data safe and secure. 

Serverless databases can be set up and ready to use in minutes. Several serverless functions permit serverless databases to operate effectively.

On-demand configuration
Serverless databases adjust database capacity based on the demands of an application. They automatically scale both I/O and volume based on data storage and computational needs. They can instantly shut down, initiate, and scale up or down to accommodate workload. With this feature allows users can access databases without managing individual instances.

Custom endpoints and read replicas
You can configure database endpoints to route the workload to specific configured instances while isolating others. With this approach, you can distribute and load-balance workloads across different instances. Users can also create low-latency read replicas within serverless databases to support high-volume read requests. The replicas share the same database storage pool, minimizing lag time and reducing costs. 

How can AWS support your serverless database requirements?
Amazon Aurora is a modern relational database service offering performance and high availability at scale, fully open source MySQL and PostgreSQL-compatible editions, and a range of developer tools for building serverless and machine learning (ML)-driven applications. Amazon Aurora Serverless is an on-demand, autoscaling configuration for Amazon Aurora that starts up, shuts down, and scales capacity up or down based on the needs of your application. 

For example, you can:

Instantly scale to hundreds of thousands of transactions.
Use a fully managed serverless document database without managing instances.
Scale database capacity without disrupting incoming application requests.
Amazon Timestream is a fast, scalable, and serverless time series database service for IoT and operational applications. Timestream stores and analyzes trillions of events per day—faster and at less cost as compared to relational databases. 

For example, you can:

Quickly analyze time-series data in SQL databases with built-in analytic functions for smoothing, interpolation, and approximation.
Process millions of queries per day and automatically scale compute resources and storage to facilitate high workloads.
Simplify data lifecycle management with a memory store for recent data and a magnetic store for historical data.
AWS also offers a range of serverless NoSQL databases, such as Amazon DocumentDB (with MongoDB compatibility), Amazon DynamoDB, Amazon ElastiCache, and Amazon Neptune.