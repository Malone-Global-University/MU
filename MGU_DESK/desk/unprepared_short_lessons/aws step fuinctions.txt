AWS Step Functions enables you to implement a business process as a series of steps that make up a workflow.
The individual steps in the workflow can invoke a Lambda function or a container that has some business logic, update a database such as DynamoDB or publish a message to a queue once that step or the entire workflow completes execution.

AWS Step Functions has two workflow options - Standard and Express. When your business process is expected to take longer than five minutes for a single execution, you should choose Standard. Some examples of a long running workflow are an ETL orchestration pipeline or when any step in your workflow waits for response from a human to move to the next step.

Express workflows are suited for workflows that take less than five minutes, and are ideal when you need high execution volume i.e. 100,000 invocations per second. You can use either Standard or Express distinctly, or combine them such that a longer Standard workflow triggers multiple shorter Express workflows that execute in parallel.

Microservice Orchestration

Lambda Functions

Lambda with approval

Express Workflows
Combine Lambda functions to build a web-based application
In this example of a simple banking system, a new bank account is created after validating a customerâ€™s name and address. The workflow begins with two Lambda functions CheckName and CheckAddress executing in parallel as task states. Once both are complete, the workflow executes the ApproveApplication Lambda function. You can define retry and catch clauses to handle errors from task states. You can use predefined system errors or handle custom errors thrown by these Lambda functions in your workflow. Since your workflow code takes on error handling, the Lambda functions can focus on the business logic and have less code. Express workflows would be a better fit for this example as the Lambda functions are performing tasks that together take less than five minutes, with no external dependencies. 

Diagram of an AWS Step Functions account-processing workflow with parallel states for AWS Lambda functions: CheckName, CheckAddress, and OpenNewAccount, starting and ending with labeled markers.
Security and IT Automation

Security Orchestration

Event Response

S3 Sync
Orchestrate a security incident response for IAM policy creation
You can use AWS Step Functions to create an automated security incident response workflow that includes a manual approval step. In this example, a Step Functions workflow is triggered when an IAM policy is created. The workflow compares the policy action against a customizable list of restricted actions. The workflow rolls back the policy temporarily, then notifies an administrator and waits for them to approve or deny. You can extend this workflow to remediate automatically such as applying alternative actions, or restricting actions to specific ARNs. See this example in action here.

Flowchart illustrating an AWS security incident response process using EventBridge, Step Functions, Lambda functions, SNS, and API Gateway, triggered by IAM role creation and involving user input for approval or denial.
Data Processing and ETL Orchestration

Data Pipeline

ETL Automation

Parallel ETL

Data Processing
Build a data processing pipeline for streaming data
In this example, Freebird built a data processing pipeline to process webhook data from multiple sources in real time and run Lambda functions that modify the data. In this use case, webhook data from several third party applications is sent through Amazon API Gateway to an Amazon Kinesis data stream. An AWS Lambda function pulls data off this Kinesis stream, and triggers an Express Workflow. This workflow goes through a series of steps to validate, process and normalize this data. In the end, a Lambda function updates the SNS topic that triggers messages to downstream Lambda functions for next steps through an SQS queue. You could have up to 100,000 invocations of this workflow per second to scale the data processing pipeline.

Diagram of an AWS workflow showing integration between AWS Lambda, Step Functions, Amazon Kinesis, API Gateway, SNS, and SQS for processing subscription expiration and webhook data validation.
Machine Learning Operations

ML Pipeline

ML Workflow
Run an ETL job and build, train and deploy a machine learning model
In this example, a Step Functions workflow runs on a schedule triggered by EventBridge to execute once a day. The workflow starts by checking whether new data is available in S3. Next, it performs an ETL job to transform the data. After that, it trains and deploys a machine learning model on this data with the use of Lambda functions that trigger a SageMaker job and wait for completion before the workflow moves to the next step. Finally, the workflow triggers a Lambda function to generate predictions that are saved to S3.

Flowchart of an AWS machine learning pipeline using Amazon EventBridge, AWS Step Functions, Amazon S3, AWS Glue, AWS Lambda, and Amazon SageMaker for data processing, model training, deployment, and predictions.
Media Processing

Data Extraction

Video Processing

Media Pipeline
Extract data from PDF or images for processing
In this example, you will learn how to combine AWS Step Functions,AWS Lambda and Amazon Textract to scan a PDF invoice to extract its text and data to process a payment. Amazon Textract analyses the text and data from the invoice and triggers a Step Functions workflow through SNS, SQS and Lambda for each successful job completion. The workflow begins with a Lambda function saving the results of a successful invoice analysis to S3. This triggers another Lambda function that processes the analyzed document to see if a payment can be processed for this invoice, and updates the information in DynamoDB. If the invoice can be processed, the workflow checks if invoice is approved for payment. If its not, it notifies a reviewer through SNS to manually approve the invoice. If its approved, a Lambda function archives the processed invoice and ends the workflow. See this example along with its code in detail here.

